function db_gui(host, user, password, database)

%% (1) gui setup
% (1.1) parse input arguments
p = inputParser;
p.addRequired('host', @(x) ischar(x));
p.addRequired('user', @(x) ischar(x));
p.addRequired('password', @(x) ischar(x));
p.addRequired('database', @(x) ischar(x));
p.parse(host, user, password, database);
args = p.Results;

fprintf(['Welcome to SchmitzLab database GUI!\n\n', ...
    'Copyright (C) 2018 Viktor Bahr (viktor [at] eridian.systems)\n\n', ...
    'Looking for working MySQL connector... ']);

% (1.2) test connector
if exist('mysql', 'file') == 3
    s = mysql('status');
    if s == 1
        fprintf('Done.\n\nTrying to establish connection... ');
        try 
            r = evalc('mysql(''open'', args.host, args.user, args.password)');
            r = evalc('mysql(''use'', args.database)');
        catch me
            fprintf('Failed.\n');
            error(me.message)
        end
        fprintf('Done.\n')
    elseif s == 0
        fprintf('Done.\n');
        answer = input('A SQL connection is already opened, [c]ontinue, close [a]ll, [q]uit: ', 's');
        if any(strcmpi(answer, {'c', 'continue'}))
            % do nothing
        elseif any(strcmpi(answer, {'a', 'ca', 'close', 'close all'}))
            while mysql('status') == 0
                mysql close;
            end
            fprintf('\nAll connections closed.\n')
            fprintf('Trying to establish new connection... ');
            try 
                r = evalc('mysql(''open'', args.host, args.user, args.password)');
                r = evalc('mysql(''use'', args.database)');
            catch me
                fprintf('Failed.\n');
                error(me.message)
            end
            fprintf('Done.\n')
        else
            fprintf('\nOkay, bye.\n')
            return;
        end
    else
        error('Connector works not as expected.');
    end
else
    error('MySQL connector not found on PATH.');
end

% (1.3) init schema
fprintf('\nInitializing database schema ... ');
if exist('db_init', 'file') == 0
    addpath('sql');
end
try
    db = db_init();
catch me
    fprintf('Failed.\n');
    error(me.message);
end
init = which('db_init.m');
fprintf('Done.\nSchema: ''%s''\n\nVerifying database:\n', init);

% (1.4) verify database
verified = verify_db(db, args);
if ~verified
    error('Database not compatible.')
end

% (1.5) draw gui
fprintf('Creating main window... ');
[gui, data] = draw_main();

fprintf('Done.\n\n');

% end of main function
%% (2) ui drawing functions
% (2.1) draw main ui
    function [gui, data] = draw_main()
        % init handle and data container
        gui = struct();
        data = struct();
     
        % get screensize
        screenSz = get(0, 'Screensize');
        screenSz = [screenSz(3), screenSz(4)];
        bgColor = [0.9400 0.9400 0.9400];
        gui.main = figure('DockControls', 'off', ...
            'MenuBar', 'none', ...
            'Name', 'SchmitzLab Database', ...
            'NumberTitle', 'off', ...
            'Color', bgColor, ...
            'Position', [screenSz(1)/4, screenSz(2)/5, 1000 650], ...
            'ToolBar', 'none', ...
            'Resize', 'off');
        
        % create menus
        gui.menu_file = uimenu('Label', 'File');
        gui.menuitem_close = uimenu(gui.menu_file, 'Label', 'Quit', ...
            'Accelerator', 'Q');
        gui.menu_about = uimenu('Label', 'About');
        
        % always show first page
        gui.page = 1;
                
        % draw first page
        
        % project
        [gui.project, data.project] = draw_project(gui.main);
        % experiment
        [gui.experiment, data.experiment] = ...
            draw_experiment(gui.main, data.project.active);
        % animal
        [gui.animal, data.animal] = ...
            draw_animal(gui.main, data.project.active);
        % virusinjection
        [gui.virusinjection, data.virusinjection] = ...
            draw_virusinjection(gui.main, data.animal.active);
        % session
        [gui.session, data.session] = ...
            draw_session(gui.main, data.animal.active, data.experiment.active);
        % next page
        [gui.next1] = ...
            draw_next1(gui.main, data.session.active);
        
        % draw second page
        
        % quickselect
        [gui.quickselect1] = ...
            draw_quickselect1(gui.main);
        % behavior
        [gui.behavior, data.behavior] = ...
            draw_behavior(gui.main, data.session.active);
        % rewardtype
        [gui.rewardtype, data.rewardtype] = ...
            draw_rewardtype(gui.main);
        % reward
        [gui.reward, data.reward] = ...
            draw_reward(gui.main, data.session.active, data.rewardtype.active);
        % amplifier
        [gui.amplifier, data.amplifier] = ...
            draw_amplifier(gui.main);
        % probetype
        [gui.probetype, data.probetype] = ...
            draw_probetype(gui.main);
        % remapping
        [gui.remapping, data.remapping] = ...
            draw_remapping(gui.main, data.probetype.active, data.amplifier.active);
        % probe
        [gui.probe, data.probe] = ...
            draw_probe(gui.main);
        % shank
        [gui.shank, data.shank] = ...
            draw_shank(gui.main, data.probetype.active);
        % siteposition
        [gui.sitepos, data.sitepos] = ...
            draw_sitepos(gui.main, data.shank.active);
        % next page
        [gui.next2] = ...
            draw_next2(gui.main);
    end
    
% (2.2) draw project table controls
    function [ui, dat] = draw_project(main)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.name] = mysql('select * from Project;');
        catch err
            dat.id = {};
            dat.name = {};
        end
        if numel(dat.id) == 0 % empty table
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            key_str = {''};
            dat.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            key_str = keystr_zipper(dat.name, dat.id);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [25 525 462.5 100]);
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Project', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [187.25 60 88 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [360 55 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Name:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 20 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', popup_state, ...
            'Position', [90 46 232.5 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a project', ...
            'Callback', @project_select_fcn);
        ui.name_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', edit_state, ...
            'Position', [90 25 232.5 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @project_add_fcn, ...
            'Position', [352.5 25 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @project_rem_fcn, ...
            'Position', [382.5 25 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @project_cancel_fcn, ...
            'Position', [412.5 25 25 25]);
    end

% (2.3) draw experiment table controls
    function [ui, dat] = draw_experiment(main, active)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.experimenter, dat.description] = ...
                mysql(sprintf('select experiment_id, experimenter, description from Experiment where project_id = %d;', ...
                active));
        catch err
            dat.id = {};
            dat.experimenter = {};
            dat.description = {};
        end
        if active == -1 % no project selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No project selected'};
            experimenter_str = '';
            description_str = '';
            dat.active = -1;
        elseif numel(dat.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            experimenter_str = '';
            description_str = '';
            dat.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(dat.experimenter, dat.id);
            experimenter_str = dat.experimenter(1);
            description_str = dat.description(1);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [512.5 455 462.5 170]);
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Experiment', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [10 130 442.5 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [360 125 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 90 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [90 116 232.5 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select an experiment', ...
            'Callback', @experiment_select_fcn);
        ui.experimenter_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'User:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 50 66 26]);
        ui.experimenter_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', experimenter_str, ...
            'Visible', 'on', ...
            'Position', [90 55 232.5 25]);
        ui.description_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Note:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 15 66 26]);
        ui.description_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', description_str, ...
            'Visible', 'on', ...
            'Position', [90 20 232.5 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', add_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @experiment_add_fcn, ...
            'Position', [352.5 95 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @experiment_rem_fcn, ...
            'Position', [382.5 95 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @experiment_cancel_fcn, ...
            'Position', [412.5 95 25 25]);
    end

% (2.4) draw animal table controls
    function [ui, dat] = draw_animal(main, active)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.genotype, dat.birthdate, dat.sex, dat.name, dat.pyrat_id] = ...
                mysql(sprintf('select animal_id, genotype, birthdate, sex, name, pyrat_id from Animal where project_id = %d;', ...
                active));
        catch err
            dat.id = {};
            dat.genotype = {};
            dat.birthdate = {};
            dat.sex = {};
            dat.name = {};
            dat.pyrat_id = {};
        end
        if active == -1 % no project selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No project selected'};
            name_str = '';
            genotype_str = '';
            sex_val = 1;
            birthdate_str = '';
            dat.active = -1;
        elseif numel(dat.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            name_str = '';
            genotype_str = '';
            sex_val = 1;
            birthdate_str = '';
            dat.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(dat.name, dat.id);
            name_str = dat.name(1);
            if strcmpi(dat.sex(1), 'm')
                sex_val = 2;
            else
                sex_val = 3;
            end
            genotype_str = dat.genotype(1);
            birthdate_str = dat.genotype(1);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [25 260 462.5 240]);
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Animal', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [10 200 442.5 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [360 195 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 160 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [90 186 232.5 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select an experiment', ...
            'Callback', @animal_select_fcn);
        ui.name_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Name:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 120 66 26]);
        ui.name_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', name_str, ...
            'Visible', 'on', ...
            'Position', [90 125 232.5 25]);
        ui.genotype_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Type:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 85 66 26]);
        ui.genotype_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', genotype_str, ...
            'Visible', 'on', ...
            'Position', [90 90 232.5 25]);
        ui.sex_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Sex:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 45 66 26]);
        ui.sex_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'Position', [90 76 232.5 4], ...
            'FontSize', 10, ...
            'HorizontalAlignment', 'center', ...
            'String', {'', 'm','f'}, ...
            'Value', sex_val, ...
            'TooltipString', 'Select animal sex');
        ui.birthdate_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Birth:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 15 66 26]);
        ui.birthdate_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', birthdate_str, ...
            'Visible', 'on', ...
            'Position', [90 20 232.5 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', add_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @animal_add_fcn, ...
            'Position', [352.5 165 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @animal_rem_fcn, ...
            'Position', [382.5 165 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @animal_cancel_fcn, ...
            'Position', [412.5 165 25 25]);
    end

% (2.5) draw steoretacticInjection table controls
    function [ui, dat] = draw_virusinjection(main, active)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.name, dat.x_coord, dat.y_coord, dat.z_coord, dat.date, dat.volume, dat.target] = ...
                mysql(sprintf('select virus_name, x_coord, y_coord, z_coord, date, volume, target from StereotacticInjection where animal_id = %d;', ...
                active));
        catch err
            dat.name = {};
            dat.x_coord = [];
            dat.y_coord = [];
            dat.z_coord = [];
            dat.date = {};
            dat.volume = [];
            dat.target = {};
        end
        if active == -1 % no animal selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No animal selected'};
            name_str = '';
            x_str = '';
            y_str = '';
            z_str = '';
            date_str = '';
            volume_str = '';
            target_str = '';
        elseif numel(dat.name) == 0 % empty table where animal_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            name_str = '';
            x_str = '';
            y_str = '';
            z_str = '';
            date_str = '';
            volume_str = '';
            target_str = '';
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(dat.name, 1:length(dat.name));
            name_str = dat.name(1);
            x_str = dat.x_coord(1);
            y_str = dat.y_coord(1);
            z_str = dat.z_coord(1);
            date_str = dat.date(1);
            volume_str = dat.volume(1);
            target_str = dat.target(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [512.5 155 462.5 275]);
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'StereotacticInjection', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [10 235 442.5 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.name)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [360 230 70 26]);
        ui.popup_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 195 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [90 221 232.5 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select an injection', ...
            'Callback', @virusinjection_select_fcn);
        ui.name_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Virus:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 155 66 26]);
        ui.name_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', name_str, ...
            'Visible', 'on', ...
            'Position', [90 160 232.5 25]);
        ui.x_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'X:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [90 120 66 26]);
        ui.x_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', x_str, ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [115 125 50 25]);
        ui.y_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Y:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [170 120 20 26]);
        ui.y_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'Position', [195 125 50 25], ...
            'FontSize', 10, ...
            'HorizontalAlignment', 'center', ...
            'String', y_str);
        ui.z_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Z:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [247 120 20 26]);
        ui.z_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'Position', [272.5 125 50 25], ...
            'FontSize', 10, ...
            'HorizontalAlignment', 'center', ...
            'String', z_str);
        ui.date_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Date:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 85 66 26]);
        ui.date_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', date_str, ...
            'Visible', 'on', ...
            'Position', [90 90 232.5 25]);
        ui.volumne_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Volume:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 50 66 26]);
        ui.volume_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', volume_str, ...
            'Visible', 'on', ...
            'Position', [90 55 232.5 25]);
        ui.target_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Target:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 15 66 26]);
        ui.target_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', target_str, ...
            'Visible', 'on', ...
            'Position', [90 20 232.5 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', add_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @virusinjection_add_fcn, ...
            'Position', [352.5 200 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @virusinjection_rem_fcn, ...
            'Position', [382.5 200 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @virusinjection_cancel_fcn, ...
            'Position', [412.5 200 25 25]);
    end

% (2.4) draw animal table controls
    function [ui, dat] = draw_session(main, animal, experiment)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.start_date, dat.note, dat.type] = ...
                mysql(sprintf('select session_id, start_date, note, session_type from Session where animal_id = %d and experiment_id = %d;', ...
                animal, experiment));
        catch err
            dat.id = [];
            dat.start_date = {};
            dat.note = {};
            dat.type = {};
        end
        if animal == -1 || experiment == -1
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No animal / experiment'};
            start_date_str = '';
            note_str = '';
            type_val = 1;
            dat.active = -1;
        elseif numel(dat.id) == 0 % empty table where animal_id, experiment_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            start_date_str = '';
            note_str = '';
            type_val = 1;
            dat.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            % TODO: more info in first zip arg
            key_str = keystr_zipper(dat.start_date, dat.id);
            start_date_str = dat.start_date(1);
            if strcmpi(dat.type(1), 'behav')
                type_val = 2;
            elseif strcmpi(dat.type(1), 'rec')
                type_val = 3;
            else
                type_val = 4;
            end
            note_str = dat.note(1);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [25 25 462.5 210]);
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Session', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [10 170 442.5 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [360 165 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 130 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [90 156 232.5 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a session', ...
            'Callback', @session_select_fcn);
        ui.start_date_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Start:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 90 66 26]);
        ui.start_date_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', start_date_str, ...
            'Visible', 'on', ...
            'Position', [90 95 232.5 25]);
        ui.note_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Note:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 55 66 26]);
        ui.note_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', note_str, ...
            'Visible', 'on', ...
            'Position', [90 60 232.5 25]);
        ui.type_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Type:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 15 66 26]);
        ui.type_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'Position', [90 46 232.5 4], ...
            'FontSize', 10, ...
            'HorizontalAlignment', 'center', ...
            'String', {'','behav','rec','both'}, ...
            'Value', type_val, ...
            'TooltipString', 'Select session type');
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', add_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @session_add_fcn, ...
            'Position', [352.5 135 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @session_rem_fcn, ...
            'Position', [382.5 135 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @session_cancel_fcn, ...
            'Position', [412.5 135 25 25]);
    end

% (2.5) draw next button panel
    function [ui] = draw_next1(main, session)
        if session < 0 % no session selected
            state = 'off';
        else
            state = 'on';
        end
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [512.5 25 462.5 105]);
        ui.continue_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', state, ...
            'Visible', 'on', ...
            'String', 'Continue', ...
            'Callback', @turn_page_fcn, ...
            'Position', [65 30 120 40]);
        ui.continue_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', sprintf('+   Add / Insert new\n-   Remove selected\nx   Cancel'), ...
            'Enable', 'off', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [260 22.5 200 60]);
    end

% (2.6) draw key quick select controls
    function [ui] = draw_quickselect1(main)
        % get table data
        ui = struct(); % struct with ui handles
        project_key_str = {''};
        experiment_key_str = {''};
        animal_key_str = {''};
        session_key_str = {''};
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [25 397.5 205 227.5], ...
            'Visible', 'off');
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Active', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [57.5 193.5 88 26]);
        ui.project_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Project:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 172.5 66 26]);
        ui.project_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'Position', [15 175 170 4], ...
            'FontSize', 10, ...
            'String', project_key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a project', ...
            'Callback', @project_select_fcn);
        ui.experiment_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Experiment:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 125 90 26]);
        ui.experiment_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'Position', [15 127.5 170 4], ...
            'FontSize', 10, ...
            'String', experiment_key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select an experiment', ...
            'Callback', @experiment_select_fcn);
        ui.animal_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Animal:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 77.5 66 26]);
        ui.animal_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'Position', [15 80 170 4], ...
            'FontSize', 10, ...
            'String', animal_key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select an animal', ...
            'Callback', @animal_select_fcn);
        ui.session_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Session:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 30 66 26]);
        ui.session_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'Position', [15 32.5 170 4], ...
            'FontSize', 10, ...
            'String', session_key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a session', ...
            'Callback', @session_select_fcn);
    end

% (2.7) draw behavior table controls
    function [ui, dat] = draw_behavior(main, session)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.real_x, dat.real_y, dat.virt_x, dat.virt_y, dat.time, dat.virt_end, dat.pulse] = ...
                mysql(sprintf('select real_x, real_y, virt_x, virt_y, time, virt_end, pulse from Behavior where session_id = %d;', session));
        catch err
            dat.real_x = [];
            dat.real_y = [];
            dat.virt_x = [];
            dat.virt_y = [];
            dat.time = [];
            dat.virt_end = [];
            dat.pulse = [];
        end
        if numel(dat.time) == 0 % empty table
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [255 397.5 340 227.5], ...
            'Visible', 'off');
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Behavior', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'off', ...
            'Position', [115 193.5 95 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.time)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [215 190 70 26]);
        ui.table = uitable('Parent', ui.panel, ...
        'ColumnName', {'RealX', 'RealY', 'VirtX', 'VirtY', 'Time', 'End', 'Pulse'}, ...
        'ColumnFormat', {'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'}, ...
        'ColumnWidth', {40, 40, 40, 40, 60, 40, 40}, ...
        'ColumnEditable', [false, false, false, false, false, false, false], ...
        'Data', [dat.real_x, dat.real_y, ...
                dat.virt_x, dat.virt_y, ...
                dat.time, strcmpi(dat.virt_end, '1'), strcmpi(dat.pulse, '1')], ...
        'Units', 'pixel', ...
        'Position', [20 90 255 100], ...
        'RowName', [], ...
        'FontSize', 10);
        ui.position_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Position:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [20 60 75 15]);
        ui.position_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'Position', [85 55 190 22.5]);
        ui.position_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'String', 'Select', ...
            'Callback', @behavior_select_fcn, ...
            'Tag', 'position', ...
            'Position', [285 55 45 22.5]);
        ui.pulse_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Pulse:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [20 20 75 15]);
        ui.pulse_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'Position', [85 15 190 22.5]);
        ui.pulse_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', 'Select', ...
            'Callback', @behavior_select_fcn, ...
            'Tag', 'pulse', ...
            'Position', [285 15 45 22.5]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @behavior_add_fcn, ...
            'Position', [295 160 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @behavior_rem_fcn, ...
            'Position', [295 130 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @behavior_cancel_fcn, ...
            'Position', [295 100 25 25]);
    end

% (2.8) draw reward_type table controls
    function [ui, dat] = draw_rewardtype(main)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.type, dat.name, dat.note] = ...
                mysql('select reward_type_id, reward_type, name, note from RewardType;');
        catch err
            dat.id = [];
            dat.type = {''};
            dat.name = {''};
            dat.note = {''};
        end
        
        if numel(dat.id) == 0 % empty table
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            key_str = {'Create new'};
            name_str = '';
            type_str = '';
            note_str = '';
            dat.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            key_str = keystr_zipper(dat.name, dat.id);
            name_str = dat.name(1);
            type_str = dat.type(1);
            note_str = dat.note(1);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [680 212.5 294 202.5], ...
            'Visible', 'off');
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'RewardType', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [119 167.5 95 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [219 163 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 120 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [70 146 154 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a reward type', ...
            'Callback', @rewardtype_select_fcn);
        ui.name_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Name:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 80 66 26]);
        ui.name_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', name_str, ...
            'Visible', 'on', ...
            'Position', [70 85 154 25]);
        ui.type_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Type:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 45 66 26]);
        ui.type_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', type_str, ...
            'Visible', 'on', ...
            'Position', [70 50 154 25]);
        ui.note_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Note:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 10 66 26]);
        ui.note_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', note_str, ...
            'Visible', 'on', ...
            'Position', [70 15 154 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @rewardtype_add_fcn, ...
            'Position', [244 125 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @rewardtype_rem_fcn, ...
            'Position', [244 95 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @rewardtype_cancel_fcn, ...
            'Position', [244 65 25 25]);
    end

% (2.9) draw reward table controls
    function [ui, dat] = draw_reward(main, session, type)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.session_id, dat.reward_type_id, dat.time] = ...
                mysql(sprintf('select session_id, reward_type_id, time from Reward where session_id = %d and reward_type_id = %d;', ...
                session, type));
        catch err
            dat.time = [];
            dat.session_id = [];
            dat.reward_type_id = [];
        end
        if numel(dat.time) == 0 % empty table
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [255 212.5 187.5 160], ...
            'Visible', 'off');
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Reward', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [25 125 95 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.time)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [115 120 80 26]);
        ui.table = uitable('Parent', ui.panel, ...
            'ColumnName', {'Time'}, ...
            'ColumnFormat', {'numeric'}, ...
            'ColumnWidth', {100}, ...
            'ColumnEditable', [false], ...
            'Data', [dat.time], ...
            'Units', 'pixel', ...
            'Position', [20 15 103 105], ...
            'RowName', [], ...
            'FontSize', 10);
%         ui.hint_text = uicontrol('Parent', ui.panel, ...
%             'Style', 'text', ...
%             'Units', 'pixel', ...
%             'FontSize', 8, ...
%             'String', 'Select a Type', ...
%             'Enable', 'on', ...
%             'HorizontalAlignment', 'center', ...
%             'Visible', 'off', ...
%             'Position', [12.5 95 220 26]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @reward_add_fcn, ...
            'Position', [141 85 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @reward_rem_fcn, ...
            'Position', [141 55 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @reward_cancel_fcn, ...
            'Position', [141 25 25 25]);
    end

% (2.10) draw Amplifier table controls
    function [ui, dat] = draw_amplifier(main)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.name] = ...
                mysql('select amplifier_id, name from Amplifier;');
        catch err
            dat.id = [];
            dat.name = {''};
        end
        
        if numel(dat.id) == 0 % empty table
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            key_str = {'Create new'};
            name_str = '';
            dat.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            key_str = keystr_zipper(dat.name, dat.id);
            name_str = dat.name(1);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [25 212.5 205 160], ...
            'Visible', 'off');
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Amplifier', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [45 125 105 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [135 120 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 90 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [15 91 135 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a reward type', ...
            'Callback', @amplifier_select_fcn);
        ui.name_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Name:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 35 66 26]);
        ui.name_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', name_str, ...
            'Visible', 'on', ...        
            'Position', [15 15 134 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @amplifier_add_fcn, ...
            'Position', [165 75 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @amplifier_rem_fcn, ...
            'Position', [165 45 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @amplifier_cancel_fcn, ...
            'Position', [165 15 25 25]);
    end

% (2.11) draw Probetype table controls
    function [ui, dat] = draw_probetype(main)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.type] = ...
                mysql('select probe_type_id, type from ProbeType;');
        catch err
            dat.id = [];
            dat.type = {''};
        end
        
        if numel(dat.id) == 0 % empty table
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            key_str = {'Create new'};
            type_str = '';
            dat.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            key_str = keystr_zipper(dat.type, dat.id);
            type_str = dat.type(1);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [25 25 205 160], ...
            'Visible', 'off');
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'ProbeType', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [35 125 105 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [135 120 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 90 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [15 91 135 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a reward type', ...
            'Callback', @probetype_select_fcn);
        ui.type_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Type:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 35 66 26]);
        ui.type_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', type_str, ...
            'Visible', 'on', ...
            'Position', [15 15 134 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @probetype_add_fcn, ...
            'Position', [165 75 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @probetype_rem_fcn, ...
            'Position', [165 45 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @probetype_cancel_fcn, ...
            'Position', [165 15 25 25]);
    end

% (2.12) draw Remapping table controls
    function [ui, dat] = draw_remapping(main, probetype, amp)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.probe_channel, dat.connector_channel, dat.headstage_channel] = ...
                mysql(sprintf('select probe_channel, connector_channel, headstage_channel from Remapping where probe_type_id = %d and amplifier_id = %d;', probetype, amp));
        catch err
            dat.probe_channel = [];
            dat.connector_channel = [];
            dat.headstage_channel = [];
        end
        if numel(dat.probe_channel) == 0 % empty table
            state = 'off';
        else % populated table
            state = 'on';
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [622.5 437.5 352.5 187.5], ...
            'Visible', 'off');
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Remapping', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [122.5 153.5 100 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.probe_channel)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [227.5 150 70 26]);
        ui.table = uitable('Parent', ui.panel, ...
        'ColumnName', {'Probe', 'Connector', 'Headstage'}, ...
        'ColumnFormat', {'numeric', 'numeric', 'numeric'}, ...
        'ColumnWidth', {80, 80, 80}, ...
        'ColumnEditable', [false, false, false], ...
        'Data', [dat.probe_channel, dat.connector_channel, dat.headstage_channel], ...
        'Units', 'pixel', ...
        'Position', [20 50 267.5 100], ...
        'RowName', [], ...
        'FontSize', 10);
        ui.file_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'File:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [20 20 75 15]);
        ui.file_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'Position', [85 15 202.5 22.5]);
        ui.file_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'String', 'Select', ...
            'Callback', @remapping_select_fcn, ...
            'Position', [297.5 15 45 22.5]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @remapping_add_fcn, ...
            'Position', [307.5 120 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @remapping_rem_fcn, ...
            'Position', [307.5 90 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @remapping_cancel_fcn, ...
            'Position', [307.5 60 25 25]);
    end

% (2.13) draw Probe table controls
    function [ui, dat] = draw_probe(main)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.probe_type_id, dat.probe_type, dat.serialnum] = ...
                mysql('select probe_id, Probe.probe_type_id, ProbeType.type, serialnum from Probe inner join ProbeType on Probe.probe_type_id=ProbeType.probe_type_id;');
        catch err
            dat.id = [];
            dat.probe_type_id = [];
            dat.probe_type = {''};
            dat.serialnum = {''};
        end
        
        if numel(dat.id) == 0 % empty table
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            key_str = {'Create new'};
            probe_type_str = {''};
            serialnum_str = '';
            dat.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            key_str = keystr_zipper(dat.id, dat.probe_type);
            serialnum_str = dat.serialnum(1);
            probe_type_str = dat.probe_type(1);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [255 25 187.5 160], ...
            'Visible', 'off');
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Probe', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [25 120 105 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [115 115 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', edit_state, ...
            'Position', [15 90 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', edit_state, ...
            'Position', [15 91 105 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a probe', ...
            'Callback', @probe_select_fcn);
        ui.probe_type_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Type:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', popup_state, ...
            'Position', [15 90 66 26]);
        ui.probe_type_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', popup_state, ...
            'Position', [15 91 105 4], ...
            'FontSize', 10, ...
            'String', probe_type_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a probe type');
        ui.serialnum_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'SN:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 35 66 26]);
        ui.serialnum_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'String', serialnum_str, ...
            'Visible', 'on', ...
            'Position', [15 15 104 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @probe_add_fcn, ...
            'Position', [145 75 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @probe_rem_fcn, ...
            'Position', [145 45 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @probe_cancel_fcn, ...
            'Position', [145 15 25 25]);
    end

% (2.14) draw Shank table controls
    function [ui, dat] = draw_shank(main, probetype)
         % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.probe_type, dat.num_sites] = ...
                mysql(sprintf('select shank_id, probe_type_id, num_sites from Shank where probe_type_id = %d;', probetype));
        catch err
            dat.id = [];
            dat.probe_type_id = [];
            dat.num_sites = [];
        end
        if probetype == -1 || numel(dat.id) == 0
            % no probe_type selected
            % empty table
            state = 'off';
            dat.active = -1;
        else % populated table
            state = 'on'; % show key select popup
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [467.5 212.5 187.5 160], ...
            'Visible', 'off');
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Shank', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [25 125 95 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [115 120 80 26]);
        ui.table = uitable('Parent', ui.panel, ...
            'Enable', state, ...
            'ColumnName', {'ID', 'Sites'}, ...
            'ColumnFormat', {'numeric', 'numeric'}, ...
            'ColumnWidth', {50, 50}, ...
            'ColumnEditable', [false, false], ...
            'Data', [dat.id, dat.num_sites], ...
            'Units', 'pixel', ...
            'Position', [20 15 103 105], ...
            'RowName', [], ...
            'FontSize', 10, ...
            'CellSelectionCallback', @shank_select_fcn);
%         ui.hint_text = uicontrol('Parent', ui.panel, ...
%             'Style', 'text', ...
%             'Units', 'pixel', ...
%             'FontSize', 8, ...
%             'String', 'Select a Type', ...
%             'Enable', 'on', ...
%             'HorizontalAlignment', 'center', ...
%             'Visible', 'off', ...
%             'Position', [12.5 95 220 26]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @shank_add_fcn, ...
            'Position', [141 85 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @shank_rem_fcn, ...
            'Position', [141 55 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @shank_cancel_fcn, ...
            'Position', [141 25 25 25]);
    end

% (2.15) draw SitePos table controls
    function [ui, dat] = draw_sitepos(main, shank)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.x_pos, dat.y_pos, dat.site_num] = ...
                mysql(sprintf('select x_pos, y_pos, site_num from SitePosition where shank_id = %s;', shank));
        catch err
            dat.x_pos = [];
            dat.y_pos = [];
            dat.site_num = [];
        end
        if shank == -1 || numel(dat.x_pos) == 0
            % no probe_type selected
            % empty table
            state = 'off';
        else % populated table
            state = 'on'; % show key select popup
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [467.5 25 187.5 160], ...
            'Visible', 'off');
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'SitePos', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [25 125 95 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.x_pos)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [115 120 80 26]);
        ui.table = uitable('Parent', ui.panel, ...
            'Enable', state, ...
            'ColumnName', {'Site','X', 'Y'}, ...
            'ColumnFormat', {'numeric', 'numeric', 'numeric'}, ...
            'ColumnWidth', {50, 25, 25}, ...
            'ColumnEditable', [false, false, false], ...
            'Data', [dat.site_num, dat.x_pos, dat.y_pos], ...
            'Units', 'pixel', ...
            'Position', [20 15 103 105], ...
            'RowName', [], ...
            'FontSize', 10);
%         ui.hint_text = uicontrol('Parent', ui.panel, ...
%             'Style', 'text', ...
%             'Units', 'pixel', ...
%             'FontSize', 8, ...
%             'String', 'Select a Type', ...
%             'Enable', 'on', ...
%             'HorizontalAlignment', 'center', ...
%             'Visible', 'off', ...
%             'Position', [12.5 95 220 26]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @sitepos_add_fcn, ...
            'Position', [141 85 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @sitepos_rem_fcn, ...
            'Position', [141 55 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @sitepos_cancel_fcn, ...
            'Position', [141 25 25 25]);
    end

% (2.16) draw next button panel
    function [ui] = draw_next2(main)
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Visible', 'off', ...
            'Position', [680, 25, 294, 160]);
        ui.continue_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', 'Continue', ...
            'Callback', @turn_page_fcn, ...
            'Position', [92.5 30 120 40]);
        ui.continue_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', sprintf('+   Add / Insert new\n-   Remove selected\nx   Cancel'), ...
            'Enable', 'off', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [100 72.5 150 60]);
    end

% (2.17) draw Recording table controls
    function [ui, dat] = draw_recording(main, session, probe, amplifier)
    end
        
%% (3) ui callback functions
% (3.1) project table callbacks  
    function project_select_fcn(src, event)
        if isempty(data.project.id)
            data.project.active = -1;
        else
            data.project.active = data.project.id(get(src, 'Value'));
        end
        % update depending tables
        experiment_update_fcn();
        animal_update_fcn();
    end

    function project_add_fcn(src, event)
        if strcmp(get(gui.project.key_popup, 'Visible'), 'on')
            popup_state = 'off';
            edit_state = 'on';
        elseif strcmp(get(gui.project.name_edit, 'Visible'), 'on')
            name = get(gui.project.name_edit, 'String');
            data.project.id = [data.project.id; insert_project(name)];
            data.project.name = [data.project.name; name];
            set(gui.project.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.project.id)));
            set(gui.project.name_edit, 'String', '');
            set(gui.project.key_popup, ...
                'String', keystr_zipper(data.project.name, data.project.id));
            set(gui.project.key_popup, ...
                'Value', length(data.project.id));
            project_select_fcn(src, event); % trigger project select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.project.name_edit, 'Visible', edit_state);
        set(gui.project.key_popup, 'Visible', popup_state);
        set(gui.project.key_cancel_btn, 'Enable', edit_state);
        set(gui.project.key_rem_btn, 'Enable', popup_state);
    end

    function project_rem_fcn(src, event)
        val = get(gui.project.key_popup, 'Value');
        id = data.project.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from Project where project_id = %d;', id));
            % update ui / data container
            data.project.id(val) = [];
            data.project.name(val) = [];
            set(gui.project.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.project.id)));
            set(gui.project.key_popup, ...
                'String', keystr_zipper(data.project.name, data.project.id));
            set(gui.project.key_popup, ...
                'Value', length(data.project.id));
            project_select_fcn(src, event);
            if isempty(data.project.id) % force edit mode
                set(gui.project.name_edit, 'Visible', 'on');
                set(gui.project.key_popup, 'Visible', 'off');
                set(gui.project.key_cancel_btn, 'Enable', 'on');
                set(gui.project.key_rem_btn, 'Enable', 'off');
            end
        end
    end

    function project_cancel_fcn(src, event)
        if ~isempty(data.project.id)
            set(gui.project.name_edit, 'Visible', 'off');
            set(gui.project.key_popup, 'Visible', 'on');
            set(gui.project.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
        else
            set(gui.project.name_edit, 'String', '');
        end
    end

% (3.2) Experiment table callbacks

    function experiment_update_fcn()
        [data.experiment.id, data.experiment.experimenter, data.experiment.description] = ...
            mysql(sprintf('select experiment_id, experimenter, description from Experiment where project_id = %d;', ...
            data.project.active));
        if data.project.active == -1 % no project selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No project selected'};
            experimenter_str = '';
            description_str = '';
            data.experiment.active = -1;
        elseif numel(data.experiment.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            experimenter_str = '';
            description_str = '';
            data.experiment.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(data.experiment.experimenter, data.experiment.id);
            experimenter_str = data.experiment.experimenter(1);
            description_str = data.experiment.description(1);
            data.experiment.active = data.experiment.id(1);
        end
        
        set(gui.experiment.key_popup, 'Enable', popup_state);
        set(gui.experiment.key_popup, 'String', key_str);
        set(gui.experiment.key_popup, 'Value', 1);
        set(gui.experiment.experimenter_edit, 'Enable', edit_state);
        set(gui.experiment.experimenter_edit, 'String', experimenter_str);
        set(gui.experiment.description_edit, 'Enable', edit_state);
        set(gui.experiment.description_edit, 'String', description_str);
        set(gui.experiment.key_add_btn, 'Enable', add_state);
        set(gui.experiment.key_rem_btn, 'Enable', popup_state);
        set(gui.experiment.key_cancel_btn, 'Enable', edit_state);
        
        % update depending tables
        session_update_fcn();
    end

    function experiment_select_fcn(src, event)
        if isempty(data.experiment.id)
            data.experiment.active = -1;
            set(gui.experiment.experimenter_edit, 'String', '');
            set(gui.experiment.description_edit, 'String', '');
        else
            val = get(src, 'Value');
            data.experiment.active = data.experiment.id(val);
            set(gui.experiment.experimenter_edit, 'String', data.experiment.experimenter(val));
            set(gui.experiment.description_edit, 'String', data.experiment.description(val));
        end
        % update depending tables
        session_update_fcn();
    end

    function experiment_add_fcn(src, event)
        if strcmp(get(gui.experiment.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.experiment.experimenter_edit, 'String', '');
            set(gui.experiment.description_edit, 'String', '');
            set(gui.experiment.key_popup, 'String', {'Create new'});
            set(gui.experiment.key_popup, 'Value', 1);
        elseif strcmp(get(gui.experiment.experimenter_edit, 'Enable'), 'on')
            experimenter = get(gui.experiment.experimenter_edit, 'String');
            description = get(gui.experiment.description_edit, 'String');
            data.experiment.id = [data.experiment.id; ...
                insert_experiment(data.project.active, ...
                'Experimenter', experimenter, ...
                'Description', description)];
            if isempty(experimenter)
                experimenter = {''};
            end
            data.experiment.experimenter = [data.experiment.experimenter; experimenter];
            if isempty(description)
                description = {''};
            end
            data.experiment.description = [data.experiment.description; description];
            set(gui.experiment.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.experiment.id)));
            set(gui.experiment.key_popup, ...
                'String', keystr_zipper(data.experiment.experimenter, data.experiment.id));
            set(gui.experiment.key_popup, ...
                'Value', length(data.experiment.id));
            experiment_select_fcn(src, event); % trigger experiment select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.experiment.experimenter_edit, 'Enable', edit_state);
            set(gui.experiment.description_edit, 'Enable', edit_state);
        set(gui.experiment.key_popup, 'Enable', popup_state);
        set(gui.experiment.key_cancel_btn, 'Enable', edit_state);
        set(gui.experiment.key_rem_btn, 'Enable', popup_state);
    end

    function experiment_rem_fcn(src, event)
        val = get(gui.experiment.key_popup, 'Value');
        id = data.experiment.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from Experiment where experiment_id = %d;', id));
            % update ui / data container
            data.experiment.id(val) = [];
            data.experiment.experimenter(val) = [];
            data.experiment.description(val) = [];
            set(gui.experiment.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.experiment.id)));
            if isempty(data.experiment.id) % force edit mode
                set(gui.experiment.experimenter_edit, 'Enable', 'on');
                set(gui.experiment.description_edit, 'Enable', 'on');
                set(gui.experiment.key_popup, 'Enable', 'off');
                set(gui.experiment.key_cancel_btn, 'Enable', 'on');
                set(gui.experiment.key_rem_btn, 'Enable', 'off');
                set(gui.experiment.key_popup, 'String', {'Create new'});
                set(gui.experiment.key_popup, 'Value', 1);
            else
                set(gui.experiment.key_popup, ...
                'String', keystr_zipper(data.experiment.experimenter, data.experiment.id));
                set(gui.experiment.key_popup, ...
                'Value', length(data.experiment.id));
            end
            experiment_select_fcn(src, event);
        end
    end

    function experiment_cancel_fcn(src, event)
        if ~isempty(data.experiment.id)
            set(gui.experiment.experimenter_edit, 'Enable', 'off');
            set(gui.experiment.description_edit, 'Enable', 'off');
            set(gui.experiment.key_popup, 'Enable', 'on');
            set(gui.experiment.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.experiment.key_popup, ...
                'String', keystr_zipper(data.experiment.experimenter, data.experiment.id));
            set(gui.project.key_popup, ...
                'Value', length(data.experiment.id));
            experiment_select_fcn(src, event);
        else
            set(gui.experiment.experimenter_edit, 'String', '');
            set(gui.experiment.description_edit, 'String', '');
        end
    end

% (3.3) Animal table callbacks

    function animal_update_fcn()
        [data.animal.id, data.animal.genotype, data.animal.birthdate, data.animal.sex, data.animal.name, data.animal.pyrat_id] = ...
            mysql(sprintf('select animal_id, genotype, birthdate, sex, name, pyrat_id from Animal where project_id = %d;', ...
            data.project.active));
        if data.project.active == -1 % no project selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No project selected'};
            name_str = '';
            genotype_str = '';
            sex_val = 1;
            birthdate_str = '';
            data.animal.active = -1;
        elseif numel(data.experiment.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            name_str = '';
            genotype_str = '';
            sex_val = 1;
            birthdate_str = '';
            data.animal.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(data.animal.name, data.animal.id);
            name_str = data.animal.name(1);
            genotype_str = data.animal.genotype(1);
            if strcmpi(data.animal.sex(1), 'm')
                sex_val = 2;
            else
                sex_val = 3;
            end
            birthdate_str = data.animal.birthdate(1);
            data.experiment.active = data.animal.id(1);
        end
        
        set(gui.animal.key_popup, 'Enable', popup_state);
        set(gui.animal.key_popup, 'String', key_str);
        set(gui.animal.key_popup, 'Value', 1);
        set(gui.animal.name_edit, 'Enable', edit_state);
        set(gui.animal.name_edit, 'String', name_str);
        set(gui.animal.genotype_edit, 'Enable', edit_state);
        set(gui.animal.genotype_edit, 'String', genotype_str);
        set(gui.animal.sex_popup, 'Value', sex_val);
        set(gui.animal.sex_popup, 'Enable', edit_state);
        set(gui.animal.birthdate_edit, 'Enable', edit_state);
        set(gui.animal.birthdate_edit, 'String', birthdate_str);
        set(gui.animal.key_add_btn, 'Enable', add_state);
        set(gui.animal.key_rem_btn, 'Enable', popup_state);
        set(gui.animal.key_cancel_btn, 'Enable', edit_state);
        
        % update depending tables
        virusinjection_update_fcn();
        session_update_fcn();
    end

    function animal_select_fcn(src, event)
        if isempty(data.animal.id)
            data.animal.active = -1;
            set(gui.animal.name_edit, 'String', '');
            set(gui.animal.genotype_edit, 'String', '');
            set(gui.animal.sex_popup, 'Value', 1);
            set(gui.animal.birthdate_edit, 'String', '');
        else
            val = get(src, 'Value');
            data.animal.active = data.animal.id(val);
            set(gui.animal.name_edit, 'String', data.animal.name(val));
            set(gui.animal.genotype_edit, 'String', data.animal.genotype(val));
            if strcmpi(data.animal.sex(val), 'm')
                sex_val = 2;
            else
                sex_val = 3;
            end
            set(gui.animal.sex_popup, 'Value', sex_val);
            set(gui.animal.birthdate_edit, 'String', data.animal.birthdate(val));
        end
        % update depending tables
        virusinjection_update_fcn();
        session_update_fcn();
    end

    function animal_add_fcn(src, event)
        sex_enum = {'', 'm', 'f'};
        if strcmp(get(gui.animal.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.animal.name_edit, 'String', '');
            set(gui.animal.genotype_edit, 'String', '');
            set(gui.animal.sex_popup, 'Value', 1);
            set(gui.animal.birthdate_edit, 'String', '');
            set(gui.animal.key_popup, 'String', {'Create new'});
            set(gui.animal.key_popup, 'Value', 1);
        elseif strcmp(get(gui.animal.name_edit, 'Enable'), 'on')
            name = get(gui.animal.name_edit, 'String');
            genotype = get(gui.animal.genotype_edit, 'String');
            sex = sex_enum{get(gui.animal.sex_popup, 'Value')};
            birthdate = get(gui.animal.birthdate_edit, 'String');
            data.animal.id = [data.animal.id; ...
                insert_animal(data.project.active, ...
                'Name', name, ...
                'Genotype', genotype, ...
                'Sex', sex, ...
                'Birthdate', birthdate)];
            if isempty(name); name = {''}; end
            data.animal.name = [data.animal.name; name];
            if isempty(genotype); genotype = {''}; end
            data.animal.genotype = [data.animal.genotype; genotype];
            if isempty(sex); sex = {''}; end
            data.animal.sex = [data.animal.sex; sex];
            if isempty(birthdate); birthdate = {''}; end
            data.animal.birthdate = [data.animal.birthdate; birthdate];
            set(gui.animal.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.animal.id)));
            set(gui.animal.key_popup, ...
                'String', keystr_zipper(data.animal.name, data.animal.id));
            set(gui.animal.key_popup, ...
                'Value', length(data.animal.id));
            animal_select_fcn(src, event); % trigger animal select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.animal.name_edit, 'Enable', edit_state);
        set(gui.animal.genotype_edit, 'Enable', edit_state);
        set(gui.animal.sex_popup, 'Enable', edit_state);
        set(gui.animal.birthdate_edit, 'Enable', edit_state);
        set(gui.animal.key_popup, 'Enable', popup_state);
        set(gui.animal.key_cancel_btn, 'Enable', edit_state);
        set(gui.animal.key_rem_btn, 'Enable', popup_state);
    end

    function animal_rem_fcn(src, event)
        val = get(gui.animal.key_popup, 'Value');
        id = data.animal.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from Animal where animal_id = %d;', id));
            % update ui / data container
            data.animal.id(val) = [];
            data.animal.name(val) = [];
            data.animal.genotype(val) = [];
            data.animal.sex(val) = [];
            data.animal.birthdate(val) = [];
            set(gui.animal.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.animal.id)));
            if isempty(data.animal.id) % force edit mode
                set(gui.animal.name_edit, 'Enable', 'on');
                set(gui.animal.genotype_edit, 'Enable', 'on');
                 set(gui.animal.sex_popup, 'Enable', 'on');
                set(gui.animal.birthdate_edit, 'Enable', 'on');
                set(gui.animal.key_popup, 'Enable', 'off');
                set(gui.animal.key_cancel_btn, 'Enable', 'on');
                set(gui.animal.key_rem_btn, 'Enable', 'off');
                set(gui.animal.key_popup, 'String', {'Create new'});
                set(gui.animal.key_popup, 'Value', 1);
            else
                set(gui.animal.key_popup, ...
                'String', keystr_zipper(data.animal.name, data.animal.id));
                set(gui.animal.key_popup, ...
                'Value', length(data.animal.id));
            end
            animal_select_fcn(src, event);
        end
    end

    function animal_cancel_fcn(src, event)
        if ~isempty(data.animal.id)
            set(gui.animal.name_edit, 'Enable', 'off');
            set(gui.animal.genotype_edit, 'Enable', 'off');
            set(gui.animal.sex_popup, 'Enable', 'off');
            set(gui.animal.birthdate_edit, 'Enable', 'off');
            set(gui.animal.key_popup, 'Enable', 'on');
            set(gui.animal.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.animal.key_popup, ...
                'String', keystr_zipper(data.animal.name, data.animal.id));
            set(gui.project.key_popup, ...
                'Value', length(data.animal.id));
            animal_select_fcn(src, event);
        else
            set(gui.animal.name_edit, 'String', '');
            set(gui.animal.genotype_edit, 'String', '');
            set(gui.animal.sex_popup, 'Value', 1);
            set(gui.animal.birthdate_edit, 'String', '');
        end
    end

% (3.4) StereotacticInjection table callbacks

    function virusinjection_update_fcn()
        [data.virusinjection.name, data.virusinjection.x_coord, data.virusinjection.y_coord, data.virusinjection.z_coord, data.virusinjection.date, data.virusinjection.volume, data.virusinjection.target] = ...
            mysql(sprintf('select virus_name, x_coord, y_coord, z_coord, date, volume, target from StereotacticInjection where animal_id = %d;', ...
            data.animal.active));
        if data.animal.active == -1 % no animal selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No animal selected'};
            name_str = '';
            x_str = '';
            y_str = '';
            z_str = '';
            date_str = '';
            volume_str = '';
            target_str = '';
        elseif numel(data.virusinjection.name) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            name_str = '';
            x_str = '';
            y_str = '';
            z_str = '';
            date_str = '';
            volume_str = '';
            target_str = '';
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(data.virusinjection.name, 1:length(data.virusinjection.name));
            name_str = data.virusinjection.name(1);
            x_str = num2str(data.virusinjection.x_coord(1));
            y_str = num2str(data.virusinjection.y_coord(1));
            z_str = num2str(data.virusinjection.z_coord(1));
            date_str = data.virusinjection.date(1);
            volume_str = num2str(data.virusinjection.volume(1));
            target_str = data.virusinjection.target(1);
        end
        
        set(gui.virusinjection.key_popup, 'Enable', popup_state);
        set(gui.virusinjection.key_popup, 'String', key_str);
        set(gui.virusinjection.key_popup, 'Value', 1);
        set(gui.virusinjection.name_edit, 'Enable', edit_state);
        set(gui.virusinjection.name_edit, 'String', name_str);
        set(gui.virusinjection.x_edit, 'Enable', edit_state);
        set(gui.virusinjection.x_edit, 'String', x_str);
        set(gui.virusinjection.y_edit, 'Enable', edit_state);
        set(gui.virusinjection.y_edit, 'String', y_str);
        set(gui.virusinjection.z_edit, 'Enable', edit_state);
        set(gui.virusinjection.z_edit, 'String', z_str);
        set(gui.virusinjection.date_edit, 'Enable', edit_state);
        set(gui.virusinjection.date_edit, 'String', date_str);
        set(gui.virusinjection.volume_edit, 'Enable', edit_state);
        set(gui.virusinjection.volume_edit, 'String', volume_str);
        set(gui.virusinjection.target_edit, 'Enable', edit_state);
        set(gui.virusinjection.target_edit, 'String', target_str);
        set(gui.virusinjection.key_add_btn, 'Enable', add_state);
        set(gui.virusinjection.key_rem_btn, 'Enable', popup_state);
        set(gui.virusinjection.key_cancel_btn, 'Enable', edit_state);
    end

    function virusinjection_select_fcn(src, event)
        if isempty(data.virusinjection.name)
            set(gui.virusinjection.name_edit, 'String', '');
            set(gui.virusinjection.x_edit, 'String', '');
            set(gui.virusinjection.y_edit, 'String', '');
            set(gui.virusinjection.z_edit, 'String', '');
            set(gui.virusinjection.date_edit, 'String', '');
            set(gui.virusinjection.volume_edit, 'String', '');
            set(gui.virusinjection.target_edit, 'String', '');
        else
            val = get(gui.virusinjection.key_popup, 'Value');
            set(gui.virusinjection.name_edit, 'String', data.virusinjection.name(val));
            set(gui.virusinjection.x_edit, 'String', num2str(data.virusinjection.x_coord(val)));
            set(gui.virusinjection.y_edit, 'String', num2str(data.virusinjection.y_coord(val)));
            set(gui.virusinjection.z_edit, 'String', num2str(data.virusinjection.z_coord(val)));
            set(gui.virusinjection.date_edit, 'String', data.virusinjection.date(val));
            set(gui.virusinjection.volume_edit, 'String', num2str(data.virusinjection.volume(val)));
            set(gui.virusinjection.target_edit, 'String', data.virusinjection.target(val));
        end
        % TODO: update depending tables
    end

    function virusinjection_add_fcn(src, event)
        if strcmp(get(gui.virusinjection.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.virusinjection.name_edit, 'String', '');
            set(gui.virusinjection.x_edit, 'String', '');
            set(gui.virusinjection.y_edit, 'String', '');
            set(gui.virusinjection.z_edit, 'String', '');
            set(gui.virusinjection.date_edit, 'String', '');
            set(gui.virusinjection.volume_edit, 'String', '');
            set(gui.virusinjection.target_edit, 'String', '');
            set(gui.virusinjection.key_popup, 'String', {'Create new'});
            set(gui.virusinjection.key_popup, 'Value', 1);
        elseif strcmp(get(gui.virusinjection.name_edit, 'Enable'), 'on')
            name = get(gui.virusinjection.name_edit, 'String');
            x = str2double(get(gui.virusinjection.x_edit, 'String'));
            y = str2double(get(gui.virusinjection.y_edit, 'String'));
            z = str2double(get(gui.virusinjection.z_edit, 'String'));
            date = get(gui.virusinjection.date_edit, 'String');
            volume = str2double(get(gui.virusinjection.volume_edit, 'String'));
            target = get(gui.virusinjection.target_edit, 'String');
            insert_stereotactic(data.animal.active, ...
                'Virus', name, ...
                'Position', [x, y , z], ...
                'Date', date, ...
                'Volume', volume, ...
                'Target', target);
            if isempty(name); name = {''}; end
            data.virusinjection.name = [data.virusinjection.name; name];
            if isempty(x); x = 0; end
            data.virusinjection.x_coord = [data.virusinjection.x_coord; x];
            if isempty(y); y = 0; end
            data.virusinjection.y_coord = [data.virusinjection.y_coord; y];
            if isempty(z); z = 0; end
            data.virusinjection.z_coord = [data.virusinjection.z_coord; z];
            if isempty(date); date = {''}; end
            data.virusinjection.date = [data.virusinjection.date; date];
            if isempty(volume); volume = 0; end
            data.virusinjection.volume = [data.virusinjection.volume; volume];
            if isempty(target); target = {''}; end
            data.virusinjection.target = [data.virusinjection.target; target];
            set(gui.virusinjection.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.virusinjection.name)));
            set(gui.virusinjection.key_popup, ...
                'String', keystr_zipper(data.virusinjection.name, 1:length(data.virusinjection.name)));
            set(gui.virusinjection.key_popup, ...
                'Value', length(data.virusinjection.name));
            virusinjection_select_fcn(src, event); % trigger virusinjection select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.virusinjection.name_edit, 'Enable', edit_state);
        set(gui.virusinjection.x_edit, 'Enable', edit_state);
        set(gui.virusinjection.y_edit, 'Enable', edit_state);
        set(gui.virusinjection.z_edit, 'Enable', edit_state);
        set(gui.virusinjection.date_edit, 'Enable', edit_state);
        set(gui.virusinjection.volume_edit, 'Enable', edit_state);
        set(gui.virusinjection.target_edit, 'Enable', edit_state);
        set(gui.virusinjection.key_popup, 'Enable', popup_state);
        set(gui.virusinjection.key_cancel_btn, 'Enable', edit_state);
        set(gui.virusinjection.key_rem_btn, 'Enable', popup_state);
    end

    function virusinjection_rem_fcn(src, event)
        val = get(gui.virusinjection.key_popup, 'Value');
        name = data.virusinjection.name{val};
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from StereotacticInjection where virus_name = ''%s'';', name));
            % update ui / data container
            data.virusinjection.name(val) = [];
            data.virusinjection.x_coord(val) = [];
            data.virusinjection.y_coord(val) = [];
            data.virusinjection.z_coord(val) = [];
            data.virusinjection.date(val) = [];
            data.virusinjection.volume(val) = [];
            data.virusinjection.target(val) = [];
            set(gui.virusinjection.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.virusinjection.name)));
            if isempty(data.virusinjection.name) % force edit mode
                set(gui.virusinjection.name_edit, 'Enable', 'on');
                set(gui.virusinjection.x_edit, 'Enable', 'on');
                set(gui.virusinjection.y_edit, 'Enable', 'on');
                set(gui.virusinjection.z_edit, 'Enable', 'on');
                set(gui.virusinjection.date_edit, 'Enable', 'on');
                set(gui.virusinjection.volume_edit, 'Enable', 'on');
                set(gui.virusinjection.target_edit, 'Enable', 'on');
                set(gui.virusinjection.key_popup, 'Enable', 'off');
                set(gui.virusinjection.key_cancel_btn, 'Enable', 'on');
                set(gui.virusinjection.key_rem_btn, 'Enable', 'off');
                set(gui.virusinjection.key_popup, 'String', {'Create new'});
                set(gui.virusinjection.key_popup, 'Value', 1);
            else
                set(gui.virusinjection.key_popup, ...
                'String', keystr_zipper(data.virusinjection.name, 1:length(data.virusinjection.name)));
                set(gui.virusinjection.key_popup, ...
                'Value', length(data.virusinjection.name));
            end
            virusinjection_select_fcn(src, event);
        end
    end

    function virusinjection_cancel_fcn(src, event)
        if ~isempty(data.virusinjection.name)
            set(gui.virusinjection.name_edit, 'Enable', 'off');
            set(gui.virusinjection.x_edit, 'Enable', 'off');
            set(gui.virusinjection.y_edit, 'Enable', 'off');
            set(gui.virusinjection.z_edit, 'Enable', 'off');
            set(gui.virusinjection.date_edit, 'Enable', 'off');
            set(gui.virusinjection.volume_edit, 'Enable', 'off');
            set(gui.virusinjection.target_edit, 'Enable', 'off');
            set(gui.virusinjection.key_popup, 'Enable', 'on');
            set(gui.virusinjection.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.virusinjection.key_popup, ...
                'String', keystr_zipper(data.virusinjection.name, 1:length(data.virusinjection.name)));
            set(gui.virusinjection.key_popup, ...
                'Value', length(data.virusinjection.name));
            virusinjection_select_fcn(src, event);
        else
            set(gui.virusinjection.name_edit, 'String', '');
            set(gui.virusinjection.x_edit, 'String', '');
            set(gui.virusinjection.y_edit, 'String', '');
            set(gui.virusinjection.z_edit, 'String', '');
            set(gui.virusinjection.date_edit, 'String', '');
            set(gui.virusinjection.volume_edit, 'String', '');
            set(gui.virusinjection.target_edit, 'String', '');
        end
    end

% (3.5) Session table callbacks

    function session_update_fcn()
        [data.session.id, data.session.start_date, data.session.note, data.session.type] = ...
            mysql(sprintf('select session_id, start_date, note, session_type from Session where animal_id = %d and experiment_id = %d;', ...
            data.animal.active, data.experiment.active));
        if data.animal.active == -1 || data.experiment.active == -1
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No animal / experiment'};
            start_date_str = '';
            note_str = '';
            type_val = 1;
            data.session.active = -1;
        elseif numel(data.session.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            start_date_str = '';
            note_str = '';
            type_val = 1;
            data.session.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(data.session.start_date, data.session.id);
            start_date_str = data.session.start_date(1);
            note_str = data.session.note(1);
            if strcmpi(data.session.type(1), 'behav')
                type_val = 2;
            elseif strcmpi(data.session.type(1), 'rec')
                type_val = 3;
            elseif strcmpi(data.session.type(1), 'both')
                type_val = 4;
            else
                type_val = 1;
            end
            data.session.active = data.session.id(1);
        end
        
        set(gui.session.key_popup, 'Enable', popup_state);
        set(gui.session.key_popup, 'String', key_str);
        set(gui.session.key_popup, 'Value', 1);
        set(gui.session.start_date_edit, 'Enable', edit_state);
        set(gui.session.start_date_edit, 'String', start_date_str);
        set(gui.session.note_edit, 'Enable', edit_state);
        set(gui.session.note_edit, 'String', note_str);
        set(gui.session.type_popup, 'Enable', edit_state);
        set(gui.session.type_popup, 'Value', type_val);
        set(gui.session.key_add_btn, 'Enable', add_state);
        set(gui.session.key_rem_btn, 'Enable', popup_state);
        set(gui.session.key_cancel_btn, 'Enable', edit_state);
        
        % update depending tables
        behavior_update_fcn();
    end

    function session_select_fcn(src, event)
        if isempty(data.session.id)
            set(gui.session.start_date_edit, 'String', '');
            set(gui.session.note_edit, 'String', '');
            set(gui.session.type_popup, 'Value', 1);
            set(gui.next1.continue_btn, 'Enable', 'off');
            data.session.active = -1;
        else
            val = get(src, 'Value');
            set(gui.session.start_date_edit, 'String', data.session.start_date(val));
            set(gui.session.note_edit, 'String', data.session.note(val));
            if strcmpi(data.session.type(val), 'behav')
                type_val = 2;
            elseif strcmpi(data.session.type(val), 'rec')
                type_val = 3;
            elseif strcmpi(data.session.type(val), 'both')
                type_val = 4;
            else
                type_val = 1;
            end
            set(gui.session.type_popup, 'Value', type_val);
            data.session.active = data.session.id(val);
            set(gui.next1.continue_btn, 'Enable', 'on');
        end
        
        % update depending tables
        behavior_update_fcn();
    end

    function session_add_fcn(src, event)
        if strcmp(get(gui.session.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.session.start_date_edit, 'String', '');
            set(gui.session.note_edit, 'String', '');
            set(gui.session.type_popup, 'Value', 1);
            set(gui.session.key_popup, 'String', {'Create new'});
            set(gui.session.key_popup, 'Value', 1);
        elseif strcmp(get(gui.session.start_date_edit, 'Enable'), 'on')
            start_date = get(gui.session.start_date_edit, 'String');
            note = get(gui.session.note_edit, 'String');
            type_val = get(gui.session.type_popup, 'Value');
            if type_val == 0
                type = '';
            elseif type_val == 1
                type = 'behav';
            elseif type_val == 2
                type = 'rec';
            else
                type = 'both';
            end
            data.session.id = [data.session.id; ...
                insert_session(data.animal.active, data.experiment.active, ...
                start_date, 'Note', note, 'Type', type)];
            data.session.start_date = [data.session.start_date; start_date];
            if isempty(note); note = {''}; end
            data.session.note = [data.session.note; note];
            if isempty(type); type = {''}; end
            data.session.type = [data.session.type; type];
            set(gui.session.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.session.id)));
            set(gui.session.key_popup, ...
                'String', keystr_zipper(data.session.start_date, data.session.id));
            set(gui.session.key_popup, ...
                'Value', length(data.session.id));
            session_select_fcn(src, event); % trigger session select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.session.start_date_edit, 'Enable', edit_state);
        set(gui.session.note_edit, 'Enable', edit_state);
        set(gui.session.type_popup, 'Enable', edit_state);
        set(gui.session.key_popup, 'Enable', popup_state);
        set(gui.session.key_cancel_btn, 'Enable', edit_state);
        set(gui.session.key_rem_btn, 'Enable', popup_state);
    end

    function session_rem_fcn(src, event)
        val = get(gui.session.key_popup, 'Value');
        id = data.session.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from Session where session_id = %d;', id));
            % update ui / data container
            data.session.id(val) = [];
            data.session.start_date(val) = [];
            data.session.note(val) = [];
            data.session.type(val) = [];
            set(gui.session.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.session.id)));
            if isempty(data.session.id) % force edit mode
                set(gui.session.start_date_edit, 'Enable', 'on');
                set(gui.session.note_edit, 'Enable', 'on');
                set(gui.session.type_popup, 'Enable', 'on');
                set(gui.session.key_popup, 'Enable', 'off');
                set(gui.session.key_cancel_btn, 'Enable', 'on');
                set(gui.session.key_rem_btn, 'Enable', 'off');
                set(gui.session.key_popup, 'String', {'Create new'});
                set(gui.session.key_popup, 'Value', 1);
            else
                set(gui.session.key_popup, ...
                'String', keystr_zipper(data.session.start_date, data.session.id));
                set(gui.session.key_popup, ...
                'Value', length(data.session.id));
            end
            session_select_fcn(src, event);
        end
    end

    function session_cancel_fcn(src, event)
        if ~isempty(data.session.id)
            set(gui.session.start_date_edit, 'Enable', 'off');
            set(gui.session.note_edit, 'Enable', 'off');
            set(gui.session.type_popup, 'Enable', 'off');
            set(gui.session.key_popup, 'Enable', 'on');
            set(gui.session.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.session.key_popup, ...
                'String', keystr_zipper(data.session.start_date, data.session.id));
            set(gui.session.key_popup, ...
                'Value', length(data.session.id));
            session_select_fcn(src, event);
        else
            set(gui.session.start_date_edit, 'String', '');
            set(gui.session.note_edit, 'String', '');
            set(gui.session.type_popup, 'Value', 1);
        end
    end

% (3.6) Continue / Back to page callbacks

    function turn_page_fcn(src, evt)
        if strcmp(get(src, 'String'), 'Continue')
            gui.page = gui.page + 1;
        elseif strcmp(get(src, 'String'), 'Back')
            gui.page = gui.page - 1;
        end
        
        switch gui.page
            case 1
                set_visible(gui.project, 'on');
                set_visible(gui.experiment, 'on');
                set_visible(gui.animal, 'on');
                set_visible(gui.virusinjection, 'on');
                set_visible(gui.session, 'on');
                set_visible(gui.next1, 'on');
                set_visible(gui.quickselect1, 'off');
                set_visible(gui.behavior, 'off');
                set_visible(gui.reward, 'off');
                set_visible(gui.rewardtype, 'off');
                set_visible(gui.amplifier, 'off');
                set_visible(gui.probetype, 'off')
            case 2
                set_visible(gui.project, 'off');
                set_visible(gui.experiment, 'off');
                set_visible(gui.animal, 'off');
                set_visible(gui.virusinjection, 'off');
                set_visible(gui.session, 'off');
                set_visible(gui.next1, 'off');
                set_visible(gui.quickselect1, 'on');
                set_visible(gui.behavior, 'on');
                set_visible(gui.remapping, 'on');
                set_visible(gui.reward, 'on');
                set_visible(gui.rewardtype, 'on');
                set_visible(gui.shank, 'on');
                set_visible(gui.probe, 'on');
                set_visible(gui.sitepos, 'on');
                set_visible(gui.amplifier, 'on');
                set_visible(gui.probetype, 'on');
                set_visible(gui.next2, 'on');
                
                % update quickselect popup strings
                set(gui.quickselect1.project_popup, 'String', get(gui.project.key_popup, 'String'));  
                set(gui.quickselect1.experiment_popup, 'String', get(gui.experiment.key_popup, 'String'));
                set(gui.quickselect1.animal_popup, 'String', get(gui.animal.key_popup, 'String'));
                set(gui.quickselect1.session_popup, 'String', get(gui.session.key_popup, 'String'));
                set(gui.quickselect1.project_popup, 'Value', get(gui.project.key_popup, 'Value'));  
                set(gui.quickselect1.experiment_popup, 'Value', get(gui.experiment.key_popup, 'Value'));
                set(gui.quickselect1.animal_popup, 'Value', get(gui.animal.key_popup, 'Value'));
                set(gui.quickselect1.session_popup, 'Value', get(gui.session.key_popup, 'Value'));
                
                % fix probe panel layout fuck-up
                set(gui.probe.probe_type_text, 'Visible', 'off');
                set(gui.probe.probe_type_popup, 'Visible', 'off');
                set(gui.probe.key_text, 'Visible', 'on');
                set(gui.probe.key_popup, 'Visible', 'on');
                set(gui.probe.serialnum_edit, 'Enable', 'off');
                
                
            case 3
            otherwise
        end
    end

% (3.7) Behavior table callbacks

    function behavior_update_fcn()
        [   data.behavior.real_x, data.behavior.real_y, ...
            data.behavior.virt_x, data.behavior.virt_y, ...
            data.behavior.time, data.behavior.virt_end, data.behavior.pulse] = ...
                mysql(sprintf('select real_x, real_y, virt_x, virt_y, time, virt_end, pulse from Behavior where session_id = %d;', ...
                data.session.active));
        if data.session.active == -1
            edit_state = 'off'; % show editbox, add and cancel btn
            rem_state = 'off';
        elseif numel(data.behavior.time) == 0 % empty table where session_id
            edit_state = 'on'; % show editbox, add and cancel btn
            rem_state = 'off';
        else % populated table
            edit_state = 'on';
            rem_state = 'on';
        end
        
        data.behavior.virt_end = strcmpi(data.behavior.virt_end, '1');
        data.behavior.pulse = strcmpi(data.behavior.pulse, '1');
        
        set(gui.behavior.table, 'Data', ...
            [data.behavior.real_x, data.behavior.real_y, ...
             data.behavior.virt_x, data.behavior.virt_y, ...
             data.behavior.time, data.behavior.virt_end, ...
            data.behavior.pulse]);
        
        set(gui.behavior.position_edit, 'Enable', edit_state);
        set(gui.behavior.position_btn, 'Enable', edit_state);
        set(gui.behavior.pulse_edit, 'Enable', 'off');
        set(gui.behavior.pulse_btn, 'Enable', 'off'),
        set(gui.behavior.table, 'Enable', edit_state);
        set(gui.behavior.key_rem_btn, 'Enable', rem_state);
        set(gui.behavior.key_cancel_btn, 'Enable', edit_state);
    end

    function behavior_select_fcn(src, event)
        switch get(src, 'Tag')
            case 'position'
                [fname, fpath] = uigetfile('*', 'Pick a position file.');
                if isnumeric(fname) % selection canceled
                    set(gui.behavior.pulse_edit, 'Enable', 'off');
                    set(gui.behavior.pulse_btn, 'Enable', 'off');
                    set(gui.behavior.key_add_btn, 'Enable', 'off');
                    return
                end
                posf = fullfile(fpath, fname);
                if exist(posf, 'file') ~= 2; error('Unable to locate %s', fname); end
                set(gui.behavior.position_edit, 'String', posf);
                set(gui.behavior.pulse_edit, 'Enable', 'on');
                set(gui.behavior.pulse_btn, 'Enable', 'on');
            case 'pulse'
                posf = get(gui.behavior.position_edit, 'String');
                [fname, fpath] = uigetfile('*', 'Pick a pulse file.');
                if isempty(posf)
                    set(gui.behavior.pulse_edit, 'Enable', 'off');
                    set(gui.behavior.pulse_btn, 'Enable', 'off');
                    set(gui.behavior.key_add_btn, 'Enable', 'off');
                    set(gui.behavior.pulse_edit, 'String', '');
                    return
                elseif isnumeric(fname)
                    set(gui.behavior.key_add_btn, 'Enable', 'off');
                    return
                end
                pulsef = fullfile(fpath, fname);
                if exist(posf, 'file') ~= 2; error('Unable to locate %s', posf); end
                if exist(pulsef, 'file') ~= 2; error('Unable to locate %s', fname); end
                set(gui.behavior.pulse_edit, 'String', pulsef);
                set(gui.behavior.key_add_btn, 'Enable', 'on');
            otherwise
                return
        end
    end

    function behavior_add_fcn(src, event)
        posf = get(gui.behavior.position_edit, 'String');
        pulsef = get(gui.behavior.pulse_edit, 'String');
        if isempty(posf) || isempty(pulsef)
            set(gui.behavior.key_add_btn, 'Enable', 'off');
            return
        end
        if exist(posf, 'file') ~= 2
            set(gui.behavior.position_edit, 'String', '');
            set(gui.behavior.pulse_edit, 'String', '');
            set(gui.behavior.pulse_edit, 'Enable', 'off');
            set(gui.behavior.pulse_btn, 'Enable', 'off');
            set(gui.behavior.key_add_btn, 'Enable', 'off');
            error('Unable to locate %s', posf)
        end
        if exist(pulsef, 'file') ~= 2
            set(gui.behavior.pulse_edit, 'String', '');
            set(gui.behavior.key_add_btn, 'Enable', 'off');
            error('Unable to locate %s', fname)
        end
        
        % import behavior data
        [real, virt, time,  pulse, reward] = ...
            import_behavior(posf, pulsef);
        
        % insert behavior table
        insert_behavior(data.session.active, real, virt, time, 'pulse', pulse);
        behavior_update_fcn();
        % insert reward table
        insert_reward(data.session.active, data.rewardtype.active, time(reward));
        reward_update_fcn();
        
        set(gui.behavior.position_edit, 'String', '');
        set(gui.behavior.pulse_edit, 'String', '');
        set(gui.behavior.pulse_edit, 'Enable', 'off');
        set(gui.behavior.pulse_btn, 'Enable', 'off');
        set(gui.behavior.key_add_btn, 'Enable', 'off');
    end

    function behavior_rem_fcn(src, event)
        % TODO: Get uitable cell selection
        % TODO: Drop selected rows from table
        behavior_update_fcn();
    end

    function behavior_cancel_fcn(src, event)
        set(gui.behavior.position_edit, 'String', '');
        set(gui.behavior.pulse_edit, 'String', '');
        set(gui.behavior.pulse_edit, 'Enable', 'off');
        set(gui.behavior.pulse_btn, 'Enable', 'off');
        set(gui.behavior.key_add_btn, 'Enable', 'off');
    end

% (3.8) Remapping table callbacks

    function remapping_update_fcn()
       [data.remapping.probe_channel, data.remapping.connector_channel, data.remapping.headstage_channel] = ...
                mysql(sprintf('select probe_channel, connector_channel, headstage_channel from Remapping where probe_type_id = %d and amplifier_id = %d;', ...
                data.probetype.active, data.amplifier.active));
        if numel(data.remapping.probe_channel) == 0 % empty table
            state = 'off'; % show editbox, add and cancel btn
        else % populated table
            state = 'on';
        end
        
        set(gui.remapping.table, 'Data', ...
            [data.remapping.probe_channel, ...
            data.remapping.connector_channel, ...
            data.remapping.headstage_channel]);
        
        set(gui.remapping.file_edit, 'Enable', 'off');
        set(gui.remapping.file_btn, 'Enable', 'on');
        set(gui.behavior.table, 'Enable', state);
        set(gui.behavior.key_rem_btn, 'Enable', state);
        set(gui.behavior.key_add_btn, 'Enable', 'off');
        set(gui.behavior.key_cancel_btn, 'Enable', 'off');
    end

    function remapping_select_fcn(src, event)
            [fname, fpath] = uigetfile('*', 'Pick a remapping file.');
            if isnumeric(fname) % selection canceled
                set(gui.remapping.file_edit, 'Enable', 'off');
                set(gui.remapping.file_edit, 'String', '');
                set(gui.remapping.key_add_btn, 'Enable', 'off');
                set(gui.remapping.key_cancel_btn, 'Enable', 'off');
                return
            end
            remapf = fullfile(fpath, fname);
            if exist(remapf, 'file') ~= 2; error('Unable to locate %s', fname); end
            set(gui.remapping.file_edit, 'String', remapf);
            set(gui.remapping.key_add_btn, 'Enable', 'on');
            set(gui.remapping.key_cancel_btn, 'Enable', 'on');
    end

    function remapping_add_fcn(src, event)
        remapf = get(gui.remapping.file_edit, 'String');
        if isempty(remapf)
            set(gui.remapping.key_add_btn, 'Enable', 'off');
            return
        end
        if exist(remapf, 'file') ~= 2
            set(gui.remapping.file_edit, 'String', '');
            set(gui.remapping.file_edit, 'Enable', 'off');
            set(gui.remapping.key_add_btn, 'Enable', 'off');
            error('Unable to locate %s', posf)
        end
        
        % extract metadata
        [~, fname, ext] = fileparts(remapf);
        finfo = regexp(fname, 'ProbeRemapping_(?<brand>\w+)_(?<type>\w+)_(?<amp>\w+)', 'names');
        if isempty(finfo) || ~strcmpi(ext, '.csv')
            error('No matching ProbeRemapping_$brand_$type_$amp.csv file found.')
        end
        amp = finfo.amp;
        type = [finfo.brand, '_', finfo.type];
        
        % check if metadata is present in database
        amplifier_id = mysql(sprintf('select amplifier_id from Amplifier where name = "%s"', amp));
        if isempty(amplifier_id)
            uin = input('Unknown Amplifier "%s". Insert new row? [Y]es, [n]o: ', 's');
            if isempty(uin) || any(strcmpi(uin, {'y, yes'}))
                amplifier_id = insert_amplifier(amp, 'Verbose', true);
            else
                fprintf('\nOkay, bye.\n')
                return;
            end
        end
        
        probe_type_id = mysql(sprintf('select probe_type_id from ProbeType where type = "%s"', type));
        if isempty(probe_type_id)
            uin = input('Unknown ProbeType "%s". Insert new row? [Y]es, [n]o: ', 's');
            if isempty(uin) || any(strcmpi(uin, {'y, yes'}))
                probe_type_id = insert_probetype(type, 'Verbose', true);
            else
                fprintf('\nOkay, bye.\n')
                return;
            end
        end
        
        if logical(mysql(sprintf( ...
            'select count(1) from Remapping where amplifier_id=%d and probe_type_id=%d', ...
            amplifier_id, probe_type_id)))
            uin = input('Remapping already in database! [R]eplace, [s]kip: ', 's');
            if isempty(uin) || any(strcmpi(uin, {'r', 'replace'}))
                % drop values from db
                mysql(sprintf('delete from Remapping where amplifier_id=%d and probe_type_id=%d', ...
                    amplifier_id, probe_type_id));
            else
                fprintf('\nOkay, bye.\n')
                return;
            end
        end
        
        % import remap data
        [shank, probechan, connectorchan, headstagechan, x, y] = import_remapping(remapf);
        
        % insert remap table
        insert_remapping(probe_type_id, amplifier_id, ...
            'Probe', probechan, 'Headstage', headstagechan, 'Connector', connectorchan, ...
            'Verbose', true);
        
        % insert shank and sitepos
        ushank = unique(shank);
        for j = 1:numel(ushank)
            num_sites = sum(shank == ushank(j));
            shank_key = [type, '_', num2str(j)];
            shank_id = insert_shank(probe_type_id, ...
                'Sites', num_sites, 'Verbose', true);
            x(isnan(x)) = 0;
            y(isnan(y)) = 0;
            insert_sitepos(shank_id, [x,y], [1:numel(probechan)]', 'Verbose', true);
        end
        
        remapping_update_fcn();
        amplifier_update_fcn();
        probetype_update_fcn();
        shank_update_fcn();
        sitepos_update_fcn();
        
        set(gui.remapping.file_edit, 'String', '');
        set(gui.remapping.file_edit, 'Enable', 'off');
        set(gui.remapping.key_add_btn, 'Enable', 'off');
        set(gui.remapping.key_cancel_btn, 'Enable', 'off');
    end

    function remapping_rem_fcn(src, event)
        % TODO: Get uitable cell selection
        % TODO: Drop selected rows from table
        remapping_update_fcn();
    end

    function remapping_cancel_fcn(src, event)
        set(gui.remapping.file_edit, 'String', '');
        set(gui.remapping.file_btn, 'Enable', 'on');
        set(gui.remapping.key_add_btn, 'Enable', 'off');
        set(gui.remapping.key_cancel_btn, 'Enable', 'off');
    end


% (3.9) Reward type tabel callbacks

    function rewardtype_update_fcn()
        
        [data.rewardtype.id, data.rewardtype.type, data.rewardtype.name, data.rewardtype.note] = ...
                mysql('select reward_type_id, reward_type, name, note from RewardType;');
        if numel(data.rewardtype.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            name_str = '';
            type_str = '';
            note_str = '';
            data.rewardtype.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(data.rewardtype.name, data.rewardtype.id);
            name_str = data.rewardtype.name(1);
            type_str = data.rewardtype.type(1);
            note_str = data.rewardtype.note(1);
            data.rewardtype.active = data.rewardtype.id(1);
        end
        
        set(gui.rewardtype.key_popup, 'Enable', popup_state);
        set(gui.rewardtype.key_popup, 'String', key_str);
        set(gui.rewardtype.key_popup, 'Value', 1);
        set(gui.rewardtype.name_edit, 'Enable', edit_state);
        set(gui.rewardtype.name_edit, 'String', name_str);
        set(gui.rewardtype.type_edit, 'Enable', edit_state);
        set(gui.rewardtype.type_edit, 'String', genotype_str);
        set(gui.rewardtype.note_edit, 'Enable', edit_state);
        set(gui.rewardtype.note_edit, 'String', note_str);
        set(gui.rewardtype.key_add_btn, 'Enable', add_state);
        set(gui.rewardtype.key_rem_btn, 'Enable', popup_state);
        set(gui.rewardtype.key_cancel_btn, 'Enable', edit_state);
        
        % update depending tables
        reward_update_fcn();
    end

    function rewardtype_select_fcn(src, event)
        if isempty(data.rewardtype.id)
            data.rewardtype.active = -1;
            set(gui.rewardtype.name_edit, 'String', '');
            set(gui.rewardtype.type_edit, 'String', '');
            set(gui.rewardtype.note_edit, 'String', '');
        else
            val = get(src, 'Value');
            data.rewardtype.active = data.rewardtype.id(val);
            set(gui.rewardtype.name_edit, 'String', data.rewardtype.name(val));
            set(gui.rewardtype.type_edit, 'String', data.rewardtype.type(val));
            set(gui.rewardtype.note_edit, 'String', data.rewardtype.note(val));
        end
        % update depending tables
        reward_update_fcn();
    end

    function rewardtype_add_fcn(src, event)
        if strcmp(get(gui.rewardtype.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.rewardtype.name_edit, 'String', '');
            set(gui.rewardtype.type_edit, 'String', '');
            set(gui.rewardtype.note_edit, 'String', '');
            set(gui.rewardtype.key_popup, 'String', {'Create new'});
            set(gui.rewardtype.key_popup, 'Value', 1);
        elseif strcmp(get(gui.rewardtype.name_edit, 'Enable'), 'on')
            name = get(gui.rewardtype.name_edit, 'String');
            type = get(gui.rewardtype.type_edit, 'String');
            note = get(gui.rewardtype.note_edit, 'String');
            data.rewardtype.id = [data.rewardtype.id; ...
                insert_rewardtype(name, type, 'Verbose', true)];
            if isempty(name); name = {''}; end
            data.rewardtype.name = [data.rewardtype.name; name];
            if isempty(type); type = {''}; end
            data.rewardtype.type = [data.rewardtype.type; type];
            if isempty(note); note = {''}; end
            data.rewardtype.note = [data.rewardtype.note; note];
            set(gui.rewardtype.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.rewardtype.id)));
            set(gui.rewardtype.key_popup, ...
                'String', keystr_zipper(data.rewardtype.name, data.rewardtype.id));
            set(gui.rewardtype.key_popup, ...
                'Value', length(data.rewardtype.id));
            rewardtype_select_fcn(src, event); % trigger rewardtype select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.rewardtype.name_edit, 'Enable', edit_state);
        set(gui.rewardtype.type_edit, 'Enable', edit_state);
        set(gui.rewardtype.note_edit, 'Enable', edit_state);
        set(gui.rewardtype.key_popup, 'Enable', popup_state);
        set(gui.rewardtype.key_cancel_btn, 'Enable', edit_state);
        set(gui.rewardtype.key_rem_btn, 'Enable', popup_state);
    end

    function rewardtype_rem_fcn(src, event)
        val = get(gui.rewardtype.key_popup, 'Value');
        id = data.rewardtype.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from RewardType where reward_type_id = %d;', id));
            % update ui / data container
            data.rewardtype.id(val) = [];
            data.rewardtype.name(val) = [];
            data.rewardtype.type(val) = [];
            data.rewardtype.note(val) = [];
            set(gui.rewardtype.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.rewardtype.id)));
            if isempty(data.rewardtype.id) % force edit mode
                set(gui.rewardtype.name_edit, 'Enable', 'on');
                set(gui.rewardtype.type_edit, 'Enable', 'on');
                set(gui.rewardtype.note_edit, 'Enable', 'on');
                set(gui.rewardtype.key_popup, 'Enable', 'off');
                set(gui.rewardtype.key_cancel_btn, 'Enable', 'on');
                set(gui.rewardtype.key_rem_btn, 'Enable', 'off');
                set(gui.rewardtype.key_popup, 'String', {'Create new'});
                set(gui.rewardtype.key_popup, 'Value', 1);
            else
                set(gui.rewardtype.key_popup, ...
                'String', keystr_zipper(data.rewardtype.name, data.rewardtype.id));
                set(gui.rewardtype.key_popup, ...
                'Value', length(data.rewardtype.id));
            end
            rewardtype_select_fcn(src, event);
        end
    end

    function rewardtype_cancel_fcn(src, event)
        if ~isempty(data.rewardtype.id)
            set(gui.rewardtype.name_edit, 'Enable', 'off');
            set(gui.rewardtype.type_edit, 'Enable', 'off');
            set(gui.rewardtype.note_edit, 'Enable', 'off');
            set(gui.rewardtype.key_popup, 'Enable', 'on');
            set(gui.rewardtype.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.rewardtype.key_popup, ...
                'String', keystr_zipper(data.rewardtype.name, data.rewardtype.id));
            set(gui.rewardtype.key_popup, ...
                'Value', length(data.rewardtype.id));
            rewardtype_select_fcn(src, event);
        else
            set(gui.rewardtype.name_edit, 'String', '');
            set(gui.rewardtype.type_edit, 'String', '');
            set(gui.rewardtype.note_edit, 'String', '');
        end
    end

% (3.10) Amplifier table controls

    function amplifier_update_fcn()
        
        [data.amplifier.id, data.amplifier.name] = ...
                mysql('select amplifier_id, name from Amplifier;');;
        if numel(data.amplifier.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            name_str = '';
            data.amplifier.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(data.amplifier.name, data.amplifier.id);
            name_str = data.amplifier.name(1);
            data.amplifier.active = data.amplifier.id(1);
        end
        
        set(gui.amplifier.key_popup, 'Enable', popup_state);
        set(gui.amplifier.key_popup, 'String', key_str);
        set(gui.amplifier.key_popup, 'Value', 1);
        set(gui.amplifier.name_edit, 'Enable', edit_state);
        set(gui.amplifier.name_edit, 'String', name_str);
        set(gui.amplifier.key_add_btn, 'Enable', add_state);
        set(gui.amplifier.key_rem_btn, 'Enable', popup_state);
        set(gui.amplifier.key_cancel_btn, 'Enable', edit_state);
        
        % update depending tables
        remapping_update_fcn();
    end

    function amplifier_select_fcn(src, event)
        if isempty(data.amplifier.id)
            data.amplifier.active = -1;
            set(gui.amplifier.name_edit, 'String', '');
        else
            val = get(src, 'Value');
            data.amplifier.active = data.amplifier.id(val);
            set(gui.amplifier.name_edit, 'String', data.amplifier.name(val));
        end
        
        % update depending tables
        remapping_update_fcn();
    end

    function amplifier_add_fcn(src, event)
        if strcmp(get(gui.amplifier.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.amplifier.name_edit, 'String', '');
            set(gui.amplifier.key_popup, 'String', {'Create new'});
            set(gui.amplifier.key_popup, 'Value', 1);
        elseif strcmp(get(gui.amplifier.name_edit, 'Enable'), 'on')
            name = get(gui.amplifier.name_edit, 'String');
            data.amplifier.id = [data.amplifier.id; ...
                insert_amplifier(name, 'Verbose', true)];
            if isempty(name); name = {''}; end
            data.amplifier.name = [data.amplifier.name; name];
            set(gui.amplifier.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.amplifier.id)));
            set(gui.amplifier.key_popup, ...
                'String', keystr_zipper(data.amplifier.name, data.amplifier.id));
            set(gui.amplifier.key_popup, ...
                'Value', length(data.amplifier.id));
            amplifier_select_fcn(src, event); % trigger rewardtype select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.amplifier.name_edit, 'Enable', edit_state);
        set(gui.amplifier.key_popup, 'Enable', popup_state);
        set(gui.amplifier.key_cancel_btn, 'Enable', edit_state);
        set(gui.amplifier.key_rem_btn, 'Enable', popup_state);
    end

    function amplifier_rem_fcn(src, event)
        val = get(gui.amplifier.key_popup, 'Value');
        id = data.amplifier.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from Amplifier where amplifier_id = %d;', id));
            % update ui / data container
            data.amplifier.id(val) = [];
            data.amplifier.name(val) = [];
            set(gui.amplifier.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.amplifier.id)));
            if isempty(data.amplifier.id) % force edit mode
                set(gui.amplifier.name_edit, 'Enable', 'on');
                set(gui.amplifier.key_popup, 'Enable', 'off');
                set(gui.amplifier.key_cancel_btn, 'Enable', 'on');
                set(gui.amplifier.key_rem_btn, 'Enable', 'off');
                set(gui.amplifier.key_popup, 'String', {'Create new'});
                set(gui.amplifier.key_popup, 'Value', 1);
            else
                set(gui.amplifier.key_popup, ...
                'String', keystr_zipper(data.amplifier.name, data.amplifier.id));
                set(gui.amplifier.key_popup, ...
                'Value', length(data.amplifier.id));
            end
            amplifier_select_fcn(src, event);
        end
    end

    function amplifier_cancel_fcn(src, event)
        if ~isempty(data.amplifier.id)
            set(gui.amplifier.name_edit, 'Enable', 'off');
            set(gui.amplifier.key_popup, 'Enable', 'on');
            set(gui.amplifier.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.amplifier.key_popup, ...
                'String', keystr_zipper(data.amplifier.name, data.amplifier.id));
            set(gui.amplifier.key_popup, ...
                'Value', length(data.amplifier.id));
            amplifier_select_fcn(src, event);
        else
            set(gui.amplifier.name_edit, 'String', '');
        end
    end

% (3.11) Reward table controls

    function reward_update_fcn()
        
        [data.reward.session_id, data.reward.reward_type_id, data.reward.time] = ...
                mysql(sprintf('select session_id, reward_type_id, time from Reward where session_id = %d and reward_type_id = %d;', ...
                data.session.active, data.rewardtype.active));
            
        if numel(data.reward.time) == 0
            state = 'off';
        else
            state = 'on';
        end
        
        set(gui.reward.key_rem_btn, 'Enable', state);
        set(gui.reward.table, 'Data', [data.reward.time]);
        set(gui.reward.table, 'Enable', state);
        set(gui.reward.subtitle_text, 'String', sprintf('( Rows: %d )', numel(data.reward.time)));
    end

    function reward_add_fcn(src, event)
        % Adding of Reward times is done via Remapping panel
    end

    function reward_rem_fcn(src, event)
        % val = get(gui.amplifier.key_popup, 'Value');
        % id = data.amplifier.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            msgbox('This feature is not yet implemeted, sorry :(');
            % delete row
            % mysql(sprintf('delete from Amplifier where amplifier_id = %d;', id));
            % update ui / data container
            % data.amplifier.id(val) = [];
            % data.amplifier.name(val) = [];
            % set(gui.amplifier.subtitle_text, ...
            %     'String', sprintf('( Rows: %d )', length(data.amplifier.id)));
            % if isempty(data.amplifier.id) % force edit mode
            %     set(gui.amplifier.name_edit, 'Enable', 'on');
            %     set(gui.amplifier.key_popup, 'Enable', 'off');s
            %     set(gui.amplifier.key_cancel_btn, 'Enable', 'on');
            %     set(gui.amplifier.key_rem_btn, 'Enable', 'off');
            %     set(gui.amplifier.key_popup, 'String', {'Create new'});
            %     set(gui.amplifier.key_popup, 'Value', 1);
            % else
            %     set(gui.amplifier.key_popup, ...
            %     'String', keystr_zipper(data.amplifier.name, data.amplifier.id));
            %    set(gui.amplifier.key_popup, ...
            %     'Value', length(data.amplifier.id));
            % end
            % amplifier_select_fcn(src, event);
        end
    end

    function reward_cancel_fcn(src, event)
        % Adding of Reward times is done via Remapping panel
    end

% (3.12) Shank table controls

    function shank_update_fcn()
        
        [data.shank.id, data.shank.probe_type, data.shank.num_sites] = ...
                mysql(sprintf('select shank_id, probe_type_id, num_sites from Shank where probe_type_id = %d;', ...
                data.probetype.active));
            
        if numel(data.shank.id) == 0
            state = 'off';
        else
            state = 'on';
        end
        
        set(gui.shank.key_rem_btn, 'Enable', state);
        set(gui.shank.table, 'Data', [data.shank.id, data.shank.num_sites]);
        set(gui.shank.table, 'Enable', state);
        set(gui.shank.subtitle_text, 'String', sprintf('( Rows: %d )', numel(data.shank.id)));
    end

    function shank_select_fcn(src, event)
        % get selection index
        index = get(event, 'Indices'); 
        gui.shank.selected = index(1);
        % update sitepos table
        sitepos_update_fcn();
    end

    function shank_add_fcn(src, event)
        % Adding of Reward times is done via Remapping panel
    end

    function shank_rem_fcn(src, event)
        % val = get(gui.amplifier.key_popup, 'Value');
        % id = data.amplifier.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            msgbox('This feature is not yet implemeted, sorry :(');
            % delete row
            % mysql(sprintf('delete from Amplifier where amplifier_id = %d;', id));
            % update ui / data container
            % data.amplifier.id(val) = [];
            % data.amplifier.name(val) = [];
            % set(gui.amplifier.subtitle_text, ...
            %     'String', sprintf('( Rows: %d )', length(data.amplifier.id)));
            % if isempty(data.amplifier.id) % force edit mode
            %     set(gui.amplifier.name_edit, 'Enable', 'on');
            %     set(gui.amplifier.key_popup, 'Enable', 'off');s
            %     set(gui.amplifier.key_cancel_btn, 'Enable', 'on');
            %     set(gui.amplifier.key_rem_btn, 'Enable', 'off');
            %     set(gui.amplifier.key_popup, 'String', {'Create new'});
            %     set(gui.amplifier.key_popup, 'Value', 1);
            % else
            %     set(gui.amplifier.key_popup, ...
            %     'String', keystr_zipper(data.amplifier.name, data.amplifier.id));
            %    set(gui.amplifier.key_popup, ...
            %     'Value', length(data.amplifier.id));
            % end
            % amplifier_select_fcn(src, event);
        end
    end

    function shank_cancel_fcn(src, event)
        % Adding of Reward times is done via Remapping panel
    end

% (3.13) ProbeType table controls

    function probetype_update_fcn()
        
        [data.probetype.id, data.probetype.type] = ...
                mysql('select probe_type_id, type from ProbeType;');
        if numel(data.probetype.id) == 0 % empty table
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            type_str = '';
            data.probetype.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(data.probetype.type, data.probetype.id);
            type_str = data.probetype.type(1);
            data.probetype.active = data.probetype.id(1);
        end
        
        set(gui.probetype.key_popup, 'Enable', popup_state);
        set(gui.probetype.key_popup, 'String', key_str);
        set(gui.probetype.key_popup, 'Value', 1);
        set(gui.probetype.type_edit, 'Enable', edit_state);
        set(gui.probetype.type_edit, 'String', type_str);
        set(gui.probetype.key_add_btn, 'Enable', add_state);
        set(gui.probetype.key_rem_btn, 'Enable', popup_state);
        set(gui.probetype.key_cancel_btn, 'Enable', edit_state);
        
        % update depending tables
        probe_update_fcn();
    end

    function probetype_select_fcn(src, event)
        if isempty(data.probetype.id)
            data.probetype.active = -1;
            set(gui.probetype.type_edit, 'String', '');
        else
            val = get(src, 'Value');
            data.probetype.active = data.probetype.id(val);
            set(gui.probetype.type_edit, 'String', data.probetype.type(val));
        end
        
        % update depending tables
        probe_update_fcn();
    end

    function probetype_add_fcn(src, event)
        if strcmp(get(gui.probetype.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.probetype.type_edit, 'String', '');
            set(gui.probetype.key_popup, 'String', {'Create new'});
            set(gui.probetype.key_popup, 'Value', 1);
        elseif strcmp(get(gui.probetype.type_edit, 'Enable'), 'on')
            type = get(gui.probetype.type_edit, 'String');
            data.probetype.id = [data.probetype.id; ...
                insert_probetype(type, 'Verbose', true)];
            if isempty(type); type = {''}; end
            data.probetype.type = [data.probetype.type; type];
            set(gui.probetype.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.probetype.id)));
            set(gui.probetype.key_popup, ...
                'String', keystr_zipper(data.probetype.type, data.probetype.id));
            set(gui.probetype.key_popup, ...
                'Value', length(data.probetype.id));
            probetype_select_fcn(src, event); % trigger select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.probetype.type_edit, 'Enable', edit_state);
        set(gui.probetype.key_popup, 'Enable', popup_state);
        set(gui.probetype.key_cancel_btn, 'Enable', edit_state);
        set(gui.probetype.key_rem_btn, 'Enable', popup_state);
    end

    function probetype_rem_fcn(src, event)
        val = get(gui.probetype.key_popup, 'Value');
        id = data.probetype.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from ProbeType where probe_type_id = %d;', id));
            % update ui / data container
            data.probetype.id(val) = [];
            data.probetype.type(val) = [];
            set(gui.probetype.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.probetype.id)));
            if isempty(data.probetype.id) % force edit mode
                set(gui.probetype.type_edit, 'Enable', 'on');
                set(gui.probetype.key_popup, 'Enable', 'off');
                set(gui.probetype.key_cancel_btn, 'Enable', 'on');
                set(gui.probetype.key_rem_btn, 'Enable', 'off');
                set(gui.probetype.key_popup, 'String', {'Create new'});
                set(gui.probetype.key_popup, 'Value', 1);
            else
                set(gui.probetype.key_popup, ...
                'String', keystr_zipper(data.probetype.type, data.probetype.id));
                set(gui.probetype.key_popup, ...
                'Value', length(data.probetype.id));
            end
            probetype_select_fcn(src, event);
        end
    end

    function probetype_cancel_fcn(src, event)
        if ~isempty(data.probetype.id)
            set(gui.probetype.type_edit, 'Enable', 'off');
            set(gui.probetype.key_popup, 'Enable', 'on');
            set(gui.probetype.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.probetype.key_popup, ...
                'String', keystr_zipper(data.probetype.type, data.probetype.id));
            set(gui.probetype.key_popup, ...
                'Value', length(data.probetype.id));
            probetype_select_fcn(src, event);
        else
            set(gui.probetype.type_edit, 'String', '');
        end
    end

% (3.14) Probe table controls

    function probe_update_fcn()
        [data.probe.id, data.probe.probe_type_id, data.probe.probe_type, data.probe.serialnum] = ...
                mysql('select probe_id, Probe.probe_type_id, ProbeType.type, serialnum from Probe inner join ProbeType on Probe.probe_type_id=ProbeType.probe_type_id;');
        if numel(data.probe.id) == 0 % empty table
            popup_state = 'off';
            key_str = {'Create new'};
            serialnum_str = '';
            data.probe.active = -1;
        else % populated table
            popup_state = 'on'; % show key select popup
            key_str = keystr_zipper(data.probe.id, data.probe.probe_type);
            serialnum_str = data.probe.serialnum(1);
            data.probe.active = data.probe.id(1);
        end
        
        set(gui.probe.key_popup, 'Enable', popup_state);
        set(gui.probe.key_popup, 'String', key_str);
        set(gui.probe.key_popup, 'Value', 1);
        set(gui.probe.key_popup, 'Visible', 'on');
        set(gui.probe.probe_type_popup, 'String', data.probetype.type);
        set(gui.probe.probe_type_popup, 'Value', 1);
        set(gui.probe.probe_type_text, 'Visible', 'off');
        set(gui.probe.probe_type_popup, 'Visible', 'off');
        set(gui.probe.serialnum_edit, 'Enable', 'off');
        set(gui.probe.serialnum_edit, 'String', serialnum_str);
        set(gui.probe.key_add_btn, 'Enable', 'on');
        set(gui.probe.key_rem_btn, 'Enable', popup_state);
        set(gui.probe.key_cancel_btn, 'Enable', 'off');
        
        % update depending tables
        %recording_update_fcn();
    end

    function probe_select_fcn(src, event)
        if isempty(data.probe.id)
            data.probe.active = -1;
            set(gui.probe.serialnum_edit, 'String', '');
        else
            val = get(src, 'Value');
            data.probe.active = data.probe.id(val);
            set(gui.probe.serialnum_edit, 'String', data.probe.serialnum(val));
        end
        
        % update depending tables
        %recording_update_fcn();
    end

    function probe_add_fcn(src, event)
        if strcmp(get(gui.probe.key_popup, 'Visible'), 'on')
            set(gui.probe.probe_type_text, 'Visible', 'on');
            set(gui.probe.probe_type_popup, 'String', data.probetype.type);
            set(gui.probe.probe_type_popup, 'Value', 1);
            set(gui.probe.probe_type_popup, 'Visible', 'on');
            set(gui.probe.probe_type_popup, 'Enable', 'on');
            set(gui.probe.key_popup, 'Visible', 'off');
            set(gui.probe.key_text, 'Visible', 'off');       
            set(gui.probe.serialnum_edit, 'Enable', 'on');
            set(gui.probe.serialnum_edit, 'String', '');
            set(gui.probe.key_cancel_btn, 'Enable', 'on');
            set(gui.probe.key_rem_btn, 'Enable', 'off');
        elseif strcmp(get(gui.probe.probe_type_popup, 'Visible'), 'on')
            val = get(gui.probe.probe_type_popup, 'Value');
            probe_type_id = data.probetype.id(val);
            serialnum = get(gui.probe.serialnum_edit, 'String');
            data.probe.id = [data.probe.id; ...
                insert_probe(probe_type_id, serialnum, 'Verbose', true)];
            data.probe.probe_type_id = [data.probe.probe_type_id; probe_type_id];
            data.probe.probe_type = [data.probe.probe_type; data.probetype.type(val)];
            if isempty(serialnum); serialnum = {''}; end
            data.probe.serialnum = [data.probe.serialnum; serialnum];
            set(gui.probe.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.probe.id)));
            set(gui.probe.key_popup, ...
                'String', keystr_zipper(data.probe.id, data.probe.probe_type));
            set(gui.probe.key_popup, ...
                'Value', length(data.probe.id));
            probe_select_fcn(gui.probe.probe_type_popup, event); % trigger select callback
            set(gui.probe.serialnum_edit, 'Enable', 'off');
            set(gui.probe.key_popup, 'Visible', 'on');
            set(gui.probe.key_text, 'Visible', 'on');
            set(gui.probe.probe_type_text, 'Visible', 'off');
            set(gui.probe.probe_type_popup, 'Visible', 'off');
            set(gui.probe.key_cancel_btn, 'Enable', 'off');
            set(gui.probe.key_rem_btn, 'Enable', 'on');
        end
    end

    function probe_rem_fcn(src, event)
        val = get(gui.probe.key_popup, 'Value');
        id = data.probe.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from Probe where probe_id = %d;', id));
            % update ui / data container
            data.probe.id(val) = [];
            data.probe.probe_type(val) = [];
            data.probe.probe_type_id(val) = [];
            data.probe.serialnum(val) = [];
            set(gui.probe.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.probe.id)));
            if isempty(data.probe.id) % force edit mode
                set(gui.probe.key_cancel_btn, 'Enable', 'off');
                set(gui.probe.key_rem_btn, 'Enable', 'off');
                set(gui.probe.key_popup, 'String', {'Create new'});
                set(gui.probe.key_popup, 'Value', 1);
            else
                set(gui.probe.key_popup, ...
                'String', keystr_zipper(data.probe.id, data.probe.probe_type));
                set(gui.probe.key_popup, ...
                'Value', length(data.probe.id));
            end
            probe_select_fcn(gui.probe.key_popup, event);
        end
    end

    function probe_cancel_fcn(src, event)
        set(gui.probe.probe_type_text, 'Visible', 'off');
        set(gui.probe.probe_type_popup, 'Visible', 'off');
        set(gui.probe.key_popup, 'Visible', 'on');
        set(gui.probe.key_text, 'Visible', 'on');
        set(gui.probe.serialnum_edit, 'Enable', 'off');
        set(gui.probe.key_cancel_btn, 'Enable', 'off');
        
        if ~isempty(data.probe.id)
            set(gui.probe.key_rem_btn, 'Enable', 'on');
            set(gui.probe.key_popup, 'Enable', 'on');

            set(gui.probe.key_popup, ...
                'String', keystr_zipper(data.probe.id, data.probetype.probe_type));
            set(gui.probe.key_popup, ...
                'Value', length(data.probe.id));
            probe_select_fcn(gui.probe.key_popup, event);
        else
            set(gui.probe.key_rem_btn, 'Enable', 'off');
            set(gui.probe.key_popup, 'String', {'Create new'});
            set(gui.probe.key_popup, 'Value', 1);
             set(gui.probe.key_popup, 'Enable', 'off');
            set(gui.probe.serialnum_edit, 'String', '');
        end        
    end
    
%% (4) helper functions

    function set_visible(s, mode)
        assert(any(strcmp(mode, {'on', 'off'})));
        fields = fieldnames(s);
        for i = 1:numel(fields)
            set(s.(fields{i}), 'Visible', mode);
        end
    end

    % zip cellstring and integer into new cellstring
    function keystr = keystr_zipper(one, two)
        n = length(one);
        m = length(two);
        keystr = cell(n, 1);
        if n == 0 || n ~= m 
            keystr = {''};
            return;
        end
        for i = 1:n
            if iscellstr(one)
                a = one{i};
                fmt_a = '%s';
            elseif iscell(one)
                a = one{i};
                fmt_a = '%d';
            else
                a = one(i);
                fmt_a = '%d';
            end
            if iscellstr(two)
                b = two{i};
                fmt_b = '%s';
            elseif iscell(two)
                b = two{i};
                fmt_b = '%d';
            else
                b = two(i);
                fmt_b = '%d';
            end
            
            keystr{i} = sprintf(sprintf('%s (ID: %s)', fmt_a, fmt_b), a, b);
        end
    end

    % verify database integrity
    function bool = verify_db(db, args)
        % verify if tables are there
        t = mysql('show tables;');
        tables = fieldnames(db);
        alive = cellfun(@(x) any(strcmp(t, x)), tables);
        if all(alive)
            fprintf('- [x] All tables present.\n')
        elseif any(alive)
            fprintf('- [~] Detected missing tables:\n');
            fprintf('\t%s\n',tables{~alive});
            create = input('- [~] Create missing tables? [Y/n]: ', 's');
            if isempty(create) || ~any(strcmpi(create, {'n', 'no'}))
                cellfun(@(x) create_table(db.(x), 'Verbose', false), tables(~alive));
                alive = cellfun(@(x) any(strcmp(x, tables)), t);
                fprintf('- [x] All tables present.\n')
            else
                fprintf('- [~] Okay, continuing with missing tables.\n')
            end
        else
            fprintf('- [o] No tables detected.\n');
            create = input('- [o] Create all tables? [Y/n]: ', 's');
            if isempty(create) || ~any(strcmpi(create, {'n', 'no'}))
                create_table(db, 'Verbose', false);
                alive = cellfun(@(x) any(strcmp(x, tables)), t);
                fprintf('- [x] All tables present.\n')
            else
                fprintf('- [o] Okay, bye.\n')
                bool = false;
                return
            end
        end
        % verify that database is populated with a-priori knowledge
        cnt = cellfun(@(x) mysql(sprintf('select count(*) from %s', x)), tables(alive));
        if ~any(cnt)
            fprintf('- [o] Database is empty.\n');
            setup = input('- [o] Run setup script? [Y/n]: ', 's');
            if isempty(setup) || ~any(strcmpi(setup, {'n', 'no'}))
                db_setup(args.host, args.user, args.password, args.database, 'Verbose', false);
            else
                fprintf('- [o] Warning, some functions will not be useable.\n');
            end
        else
            fprintf('- [x] Database seems populated (%d rows).\n', sum(cnt));
        end
        fprintf('\n')
        bool = true;
    end

%     function col_cell = htmlCellColor(color, str)
%         if ~isempty(color)
%             col_cell = sprintf('<html><table border=0 bgcolor=%s><TR><TD>%s</TD></TR></table></html>', ...
%                 color, str);
%         end
%     end
end

