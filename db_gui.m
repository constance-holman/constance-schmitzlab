function db_gui(host, user, password, database)

%% (1) gui setup
% (1.1) parse input arguments
p = inputParser;
p.addRequired('host', @(x) ischar(x));
p.addRequired('user', @(x) ischar(x));
p.addRequired('password', @(x) ischar(x));
p.addRequired('database', @(x) ischar(x));
p.parse(host, user, password, database);
args = p.Results;

fprintf(['Welcome to SchmitzLab database GUI!\n\n', ...
    'Copyright (C) 2018 Viktor Bahr (viktor [at] eridian.systems)\n\n', ...
    'Looking for working MySQL connector... ']);

% (1.2) test connector
% if exist('mysql', 'file') == 3
%     s = mysql('status');
%     if s == 1
%         fprintf('Done.\n\nTrying to establish connection... ');
%         try 
%             r = evalc('mysql(''open'', args.host, args.user, args.password)');
%             r = evalc('mysql(''use'', args.database)');
%         catch me
%             fprintf('Failed.\n');
%             error(me.message)
%         end
%         fprintf('Done.\n')
%     elseif s == 0
%         fprintf('Done.\n');
%         answer = input('A SQL connection is already opened, [c]ontinue, close [a]ll, [q]uit: ', 's');
%         if any(strcmpi(answer, {'c', 'continue'}))
%             do nothing
%         elseif any(strcmpi(answer, {'a', 'ca', 'close', 'close all'}))
%             while mysql('status') == 0
%                 mysql close;
%             end
%             fprintf('\nAll connections closed.\n')
%             fprintf('Trying to establish new connection... ');
%             try 
%                 r = evalc('mysql(''open'', args.host, args.user, args.password)');
%                 r = evalc('mysql(''use'', args.database)');
%             catch me
%                 fprintf('Failed.\n');
%                 error(me.message)
%             end
%             fprintf('Done.\n')
%         else
%             fprintf('\nOkay, bye.\n')
%             return;
%         end
%     else
%         error('Connector works not as expected.');
%     end
% else
%     error('MySQL connector not found on PATH.');
% end

% (1.3) init schema
fprintf('\nInitializing database schema ... ');
if exist('db_init', 'file') == 0
    addpath('sql');
end
try
    db = db_init();
catch me
    fprintf('Failed.\n');
    error(me.message);
end
init = which('db_init.m');
fprintf('Done.\nSchema: ''%s''\n\nVerifying database:\n', init);

% (1.4) verify database
% verified = verify_db(db, args);
% if ~verified
%     error('Database not compatible.')
% end

% (1.5) draw gui
fprintf('Creating main window... ');
[gui, data] = draw_main();
fprintf('Done.\n\n');

% end of main function
%% (2) ui drawing functions
% (2.1) draw main ui
    function [gui, data] = draw_main()
        % init handle and data container
        gui = struct();
        data = struct();
     
        % get screensize
        screenSz = get(0, 'Screensize');
        screenSz = [screenSz(3), screenSz(4)];
        bgColor = [0.9400 0.9400 0.9400];
        gui.main = figure('DockControls', 'off', ...
            'MenuBar', 'none', ...
            'Name', 'SchmitzLab Database', ...
            'NumberTitle', 'off', ...
            'Color', bgColor, ...
            'Position', [screenSz(1)/4, screenSz(2)+screenSz(2)/5, 1000 650], ...
            'ToolBar', 'none', ...
            'Resize', 'off');
        
        % create menus
        gui.menu_file = uimenu('Label', 'File');
        gui.menuitem_close = uimenu(gui.menu_file, 'Label', 'Quit', ...
            'Accelerator', 'Q');
        gui.menu_about = uimenu('Label', 'About');
                
        % create first page
        [gui.project, data.project] = draw_project(gui.main);
        [gui.experiment, data.experiment] = ...
            draw_experiment(gui.main, data.project.active);
        [gui.animal, data.animal] = ...
            draw_animal(gui.main, data.project.active);
        [gui.virusinjection, data.virusinjection] = ...
            draw_virusinjection(gui.main, data.animal.active);
        [gui.session, data.session] = ...
            draw_session(gui.main, data.animal.active, data.experiment.active);
        [gui.next1] = ...
            draw_next1(gui.main, data.session.active);
    end
    
% (2.2) draw project table controls
    function [ui, dat] = draw_project(main)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.name] = mysql('select * from Project;');
        catch err
            dat.id = {};
            dat.name = {};
        end
        if numel(dat.id) == 0 % empty table
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            key_str = {''};
            dat.active = 0;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            key_str = keystr_zipper(dat.name, dat.id);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [25 525 462.5 100]);
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Project', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [187.25 60 88 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [360 55 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Name:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 20 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', popup_state, ...
            'Position', [90 46 232.5 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a project', ...
            'Callback', @project_select_fcn);
        ui.name_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', edit_state, ...
            'Position', [90 25 232.5 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'on', ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @project_add_fcn, ...
            'Position', [352.5 25 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @project_rem_fcn, ...
            'Position', [382.5 25 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @project_cancel_fcn, ...
            'Position', [412.5 25 25 25]);
    end

% (2.3) draw experiment table controls
    function [ui, dat] = draw_experiment(main, active)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.experimenter, dat.description] = ...
                mysql(sprintf('select experiment_id, experimenter, description from Experiment where project_id = %d;', ...
                active));
        catch err
            dat.id = {};
            dat.experimenter = {};
            dat.description = {};
        end
        if active == 0 % no project selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No project selected'};
            experimenter_str = '';
            description_str = '';
            dat.active = 0;
        elseif numel(dat.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            experimenter_str = '';
            description_str = '';
            dat.active = 0;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(dat.experimenter, dat.id);
            experimenter_str = dat.experimenter(1);
            description_str = dat.description(1);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [512.5 455 462.5 170]);
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Experiment', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [10 130 442.5 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [360 125 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 90 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [90 116 232.5 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select an experiment', ...
            'Callback', @experiment_select_fcn);
        ui.experimenter_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'User:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 50 66 26]);
        ui.experimenter_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', experimenter_str, ...
            'Visible', 'on', ...
            'Position', [90 55 232.5 25]);
        ui.description_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Note:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 15 66 26]);
        ui.description_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', description_str, ...
            'Visible', 'on', ...
            'Position', [90 20 232.5 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', add_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @experiment_add_fcn, ...
            'Position', [352.5 95 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @experiment_rem_fcn, ...
            'Position', [382.5 95 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @experiment_cancel_fcn, ...
            'Position', [412.5 95 25 25]);
    end

% (2.4) draw animal table controls
    function [ui, dat] = draw_animal(main, active)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.genotype, dat.birthdate, dat.sex, dat.name, dat.pyrat_id] = ...
                mysql(sprintf('select animal_id, genotype, birthdate, sex, name, pyrat_id from Animal where project_id = %d;', ...
                active));
        catch err
            dat.id = {};
            dat.genotype = {};
            dat.birthdate = {};
            dat.sex = {};
            dat.name = {};
            dat.pyrat_id = {};
        end
        if active == 0 % no project selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No project selected'};
            name_str = '';
            genotype_str = '';
            sex_val = 1;
            birthdate_str = '';
            dat.active = 0;
        elseif numel(dat.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            name_str = '';
            genotype_str = '';
            sex_val = 1;
            birthdate_str = '';
            dat.active = 0;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(dat.name, dat.id);
            name_str = dat.name(1);
            if strcmpi(dat.sex(1), 'm')
                sex_val = 2;
            else
                sex_val = 3;
            end
            genotype_str = dat.genotype(1);
            birthdate_str = dat.genotype(1);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [25 260 462.5 240]);
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Animal', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [10 200 442.5 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [360 195 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 160 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [90 186 232.5 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select an experiment', ...
            'Callback', @animal_select_fcn);
        ui.name_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Name:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 120 66 26]);
        ui.name_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', name_str, ...
            'Visible', 'on', ...
            'Position', [90 125 232.5 25]);
        ui.genotype_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Type:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 85 66 26]);
        ui.genotype_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', genotype_str, ...
            'Visible', 'on', ...
            'Position', [90 90 232.5 25]);
        ui.sex_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Sex:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 45 66 26]);
        ui.sex_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'Position', [90 76 232.5 4], ...
            'FontSize', 10, ...
            'HorizontalAlignment', 'center', ...
            'String', {'', 'm','f'}, ...
            'Value', sex_val, ...
            'TooltipString', 'Select animal sex');
        ui.birthdate_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Birth:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 15 66 26]);
        ui.birthdate_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', birthdate_str, ...
            'Visible', 'on', ...
            'Position', [90 20 232.5 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', add_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @animal_add_fcn, ...
            'Position', [352.5 165 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @animal_rem_fcn, ...
            'Position', [382.5 165 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @animal_cancel_fcn, ...
            'Position', [412.5 165 25 25]);
    end

% (2.5) draw SteoretacticInjection table controls
    function [ui, dat] = draw_virusinjection(main, active)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.name, dat.x_coord, dat.y_coord, dat.date, dat.volume, dat.target] = ...
                mysql(sprintf('select virus_name, x_coord, y_coord, date, volume, target from StereotacticInjection where animal_id = %d;', ...
                active));
        catch err
            dat.name = {};
            dat.x_coord = [];
            dat.y_coord = [];
            dat.date = {};
            dat.volume = [];
            dat.target = {};
        end
        if active == 0 % no animal selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No animal selected'};
            name_str = '';
            x_str = '';
            y_str = '';
            date_str = '';
            volume_str = '';
            target_str = '';
        elseif numel(dat.name) == 0 % empty table where animal_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            name_str = '';
            x_str = '';
            y_str = '';
            date_str = '';
            volume_str = '';
            target_str = '';
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(dat.name, 1:length(dat.name));
            name_str = dat.name(1);
            x_str = dat.x_coord;
            y_str = dat.y_coord;
            date_str = dat.date(1);
            volume_str = dat.volume(1);
            target_str = dat.target(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [512.5 155 462.5 275]);
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'StereotacticInjection', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [10 235 442.5 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.name)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [360 230 70 26]);
        ui.popup_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 195 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [90 221 232.5 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select an injection', ...
            'Callback', @virusinjection_select_fcn);
        ui.name_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Virus:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 155 66 26]);
        ui.name_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', name_str, ...
            'Visible', 'on', ...
            'Position', [90 160 232.5 25]);
        ui.x_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'X:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [90 120 66 26]);
        ui.x_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', x_str, ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [120 125 70 25]);
        ui.y_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Y:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [215 120 20 26]);
        ui.y_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'Position', [252.5 125 70 25], ...
            'FontSize', 10, ...
            'HorizontalAlignment', 'center', ...
            'String', y_str);
        ui.date_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Date:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 85 66 26]);
        ui.date_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', date_str, ...
            'Visible', 'on', ...
            'Position', [90 90 232.5 25]);
        ui.volumne_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Volume:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 50 66 26]);
        ui.volume_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', volume_str, ...
            'Visible', 'on', ...
            'Position', [90 55 232.5 25]);
        ui.target_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Target:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 15 66 26]);
        ui.target_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', target_str, ...
            'Visible', 'on', ...
            'Position', [90 20 232.5 25]);
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', add_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @virusinjection_add_fcn, ...
            'Position', [352.5 200 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @virusinjection_rem_fcn, ...
            'Position', [382.5 200 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @virusinjection_cancel_fcn, ...
            'Position', [412.5 200 25 25]);
    end

% (2.4) draw animal table controls
    function [ui, dat] = draw_session(main, animal, experiment)
        % get table data
        ui = struct(); % struct with ui handles
        dat = struct(); % struct with table data
        try
            [dat.id, dat.start_date, dat.note, dat.type] = ...
                mysql(sprintf('select session_id, start_date, note, session_type from Session where animal_id = %d and experiment_id = %d;', ...
                animal, experiment));
        catch err
            dat.id = [];
            dat.start_date = {};
            dat.note = {};
            dat.type = {};
        end
        if animal == 0 || experiment == 0
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No animal / experiment'};
            start_date_str = '';
            note_str = '';
            type_val = 1;
            dat.active = 0;
        elseif numel(dat.id) == 0 % empty table where animal_id, experiment_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            start_date_str = '';
            note_str = '';
            type_val = 1;
            dat.active = 0;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            % TODO: more info in first zip arg
            key_str = keystr_zipper(dat.start_date, dat.id);
            start_date_str = dat.start_date(1);
            if strcmpi(dat.type(1), 'behav')
                type_val = 2;
            elseif strcmpi(dat.type(1), 'rec')
                type_val = 3;
            else
                type_val = 4;
            end
            note_str = dat.note(1);
            dat.active = dat.id(1);
        end
        
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [25 25 462.5 210]);
        ui.title_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 12, ...
            'FontWeight', 'bold', ...
            'String', 'Session', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [10 170 442.5 26]);
        ui.subtitle_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 8, ...
            'String', sprintf('( Rows: %d )', numel(dat.id)), ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'on', ...
            'Position', [360 165 70 26]);
        ui.key_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Key:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 130 66 26]);
        ui.key_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'Position', [90 156 232.5 4], ...
            'FontSize', 10, ...
            'String', key_str, ...
            'Value', 1, ...
            'TooltipString', 'Select a session', ...
            'Callback', @session_select_fcn);
        ui.start_date_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Start:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 90 66 26]);
        ui.start_date_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', start_date_str, ...
            'Visible', 'on', ...
            'Position', [90 95 232.5 25]);
        ui.note_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Note:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 55 66 26]);
        ui.note_edit = uicontrol('Parent', ui.panel, ...
            'Style', 'edit', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'String', note_str, ...
            'Visible', 'on', ...
            'Position', [90 60 232.5 25]);
        ui.type_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', 'Type:', ...
            'Enable', 'on', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [15 15 66 26]);
        ui.type_popup = uicontrol('Parent', ui.panel, ...
            'Style', 'popupmenu', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'Position', [90 46 232.5 4], ...
            'FontSize', 10, ...
            'HorizontalAlignment', 'center', ...
            'String', {'','behav','rec','both'}, ...
            'Value', type_val, ...
            'TooltipString', 'Select session type');
        ui.key_add_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', add_state, ...
            'Visible', 'on', ...
            'String', '+', ...
            'Callback', @session_add_fcn, ...
            'Position', [352.5 135 25 25]);
        ui.key_rem_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', popup_state, ...
            'Visible', 'on', ...
            'String', '-', ...
            'Callback', @session_rem_fcn, ...
            'Position', [382.5 135 25 25]);
        ui.key_cancel_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', edit_state, ...
            'Visible', 'on', ...
            'String', 'x', ...
            'Callback', @session_cancel_fcn, ...
            'Position', [412.5 135 25 25]);
    end

% (2.5) draw next button panel
    function [ui] = draw_next1(main, active)
        % draw ui controls
        ui.panel = uipanel('Parent', main, ...
            'BorderType', 'line', ...
            'HighlightColor', [0 0 0], ...
            'Units', 'pixel', ...
            'Position', [512.5 25 462.5 105]);
        ui.continue_btn = uicontrol('Parent', ui.panel, ... 
            'Style', 'pushbutton', ...
            'Units', 'pixel', ...
            'Enable', 'off', ...
            'Visible', 'on', ...
            'String', 'Continue', ...
            'Callback', @continue_fcn, ...
            'Position', [65 30 120 40]);
        ui.continue_text = uicontrol('Parent', ui.panel, ...
            'Style', 'text', ...
            'Units', 'pixel', ...
            'FontSize', 10, ...
            'String', sprintf('+   Add / Insert new\n-   Remove selected\nx   Cancel'), ...
            'Enable', 'off', ...
            'HorizontalAlignment', 'left', ...
            'Visible', 'on', ...
            'Position', [260 22.5 200 60]);
    end
        
%% (3) ui callback functions
% (3.1) project table callbacks  
    function project_select_fcn(src, event)
        if isempty(data.project.id)
            data.project.active = 0;
        else
            data.project.active = data.project.id(get(gui.project.key_popup, 'Value'));
        end
        % update depending tables
        experiment_update_fcn();
        animal_update_fcn();
    end

    function project_add_fcn(src, event)
        if strcmp(get(gui.project.key_popup, 'Visible'), 'on')
            popup_state = 'off';
            edit_state = 'on';
        elseif strcmp(get(gui.project.name_edit, 'Visible'), 'on')
            name = get(gui.project.name_edit, 'String');
            data.project.id = [data.project.id; insert_project(name)];
            data.project.name = [data.project.name; name];
            set(gui.project.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.project.id)));
            set(gui.project.name_edit, 'String', '');
            set(gui.project.key_popup, ...
                'String', keystr_zipper(data.project.name, data.project.id));
            set(gui.project.key_popup, ...
                'Value', length(data.project.id));
            project_select_fcn(src, event); % trigger project select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.project.name_edit, 'Visible', edit_state);
        set(gui.project.key_popup, 'Visible', popup_state);
        set(gui.project.key_cancel_btn, 'Enable', edit_state);
        set(gui.project.key_rem_btn, 'Enable', popup_state);
    end

    function project_rem_fcn(src, event)
        val = get(gui.project.key_popup, 'Value');
        id = data.project.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from Project where project_id = %d;', id));
            % update ui / data container
            data.project.id(val) = [];
            data.project.name(val) = [];
            set(gui.project.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.project.id)));
            set(gui.project.key_popup, ...
                'String', keystr_zipper(data.project.name, data.project.id));
            set(gui.project.key_popup, ...
                'Value', length(data.project.id));
            project_select_fcn(src, event);
            if isempty(data.project.id) % force edit mode
                set(gui.project.name_edit, 'Visible', 'on');
                set(gui.project.key_popup, 'Visible', 'off');
                set(gui.project.key_cancel_btn, 'Enable', 'on');
                set(gui.project.key_rem_btn, 'Enable', 'off');
            end
        end
    end

    function project_cancel_fcn(src, event)
        if ~isempty(data.project.id)
            set(gui.project.name_edit, 'Visible', 'off');
            set(gui.project.key_popup, 'Visible', 'on');
            set(gui.project.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
        else
            set(gui.project.name_edit, 'String', '');
        end
    end

% (3.2) Experiment table callbacks

    function experiment_update_fcn()
        [data.experiment.id, data.experiment.experimenter, data.experiment.description] = ...
            mysql(sprintf('select experiment_id, experimenter, description from Experiment where project_id = %d;', ...
            data.project.active));
        if data.project.active == 0 % no project selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No project selected'};
            experimenter_str = '';
            description_str = '';
            data.experiment.active = 0;
        elseif numel(data.experiment.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            experimenter_str = '';
            description_str = '';
            data.experiment.active = 0;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(dat.experimenter, id);
            experimenter_str = dat.experimenter(1);
            description_str = dat.desc(1);
            data.experiment.active = dat.id(1);
        end
        
        set(gui.experiment.key_popup, 'Enable', popup_state);
        set(gui.experiment.key_popup, 'String', key_str);
        set(gui.experiment.key_popup, 'Value', 1);
        set(gui.experiment.experimenter_edit, 'Enable', edit_state);
        set(gui.experiment.experimenter_edit, 'String', experimenter_str);
        set(gui.experiment.description_edit, 'Enable', edit_state);
        set(gui.experiment.description_edit, 'String', description_str);
        set(gui.experiment.key_add_btn, 'Enable', add_state);
        set(gui.experiment.key_rem_btn, 'Enable', popup_state);
        set(gui.experiment.key_cancel_btn, 'Enable', edit_state);
    end

    function experiment_select_fcn(src, event)
        if isempty(data.experiment.id)
            data.experiment.active = 0;
            set(gui.experiment.experimenter_edit, 'String', '');
            set(gui.experiment.description_edit, 'String', '');
        else
            val = get(gui.experiment.key_popup, 'Value');
            data.experiment.active = data.experiment.id(val);
            set(gui.experiment.experimenter_edit, 'String', data.experiment.experimenter(val));
            set(gui.experiment.description_edit, 'String', data.experiment.description(val));
        end
        % TODO: update depending tables
        session_update_fcn();
    end

    function experiment_add_fcn(src, event)
        if strcmp(get(gui.experiment.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.experiment.experimenter_edit, 'String', '');
            set(gui.experiment.description_edit, 'String', '');
            set(gui.experiment.key_popup, 'String', {'Create new'});
            set(gui.experiment.key_popup, 'Value', 1);
        elseif strcmp(get(gui.experiment.experimenter_edit, 'Enable'), 'on')
            experimenter = get(gui.experiment.experimenter_edit, 'String');
            description = get(gui.experiment.description_edit, 'String');
            data.experiment.id = [data.experiment.id; ...
                insert_experiment(data.project.active, ...
                'Experimenter', experimenter, ...
                'Description', description)];
            if isempty(experimenter)
                experimenter = {''};
            end
            data.experiment.experimenter = [data.experiment.experimenter; experimenter];
            if isempty(description)
                description = {''};
            end
            data.experiment.description = [data.experiment.description; description];
            set(gui.experiment.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.experiment.id)));
            set(gui.experiment.key_popup, ...
                'String', keystr_zipper(data.experiment.experimenter, data.experiment.id));
            set(gui.experiment.key_popup, ...
                'Value', length(data.experiment.id));
            experiment_select_fcn(src, event); % trigger experiment select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.experiment.experimenter_edit, 'Enable', edit_state);
            set(gui.experiment.description_edit, 'Enable', edit_state);
        set(gui.experiment.key_popup, 'Enable', popup_state);
        set(gui.experiment.key_cancel_btn, 'Enable', edit_state);
        set(gui.experiment.key_rem_btn, 'Enable', popup_state);
    end

    function experiment_rem_fcn(src, event)
        val = get(gui.experiment.key_popup, 'Value');
        id = data.experiment.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from Experiment where experiment_id = %d;', id));
            % update ui / data container
            data.experiment.id(val) = [];
            data.experiment.experimenter(val) = [];
            data.experiment.description(val) = [];
            set(gui.experiment.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.experiment.id)));
            if isempty(data.experiment.id) % force edit mode
                set(gui.experiment.experimenter_edit, 'Enable', 'on');
                set(gui.experiment.description_edit, 'Enable', 'on');
                set(gui.experiment.key_popup, 'Enable', 'off');
                set(gui.experiment.key_cancel_btn, 'Enable', 'on');
                set(gui.experiment.key_rem_btn, 'Enable', 'off');
                set(gui.experiment.key_popup, 'String', {'Create new'});
                set(gui.experiment.key_popup, 'Value', 1);
            else
                set(gui.experiment.key_popup, ...
                'String', keystr_zipper(data.experiment.experimenter, data.experiment.id));
                set(gui.experiment.key_popup, ...
                'Value', length(data.experiment.id));
            end
            experiment_select_fcn(src, event);
        end
    end

    function experiment_cancel_fcn(src, event)
        if ~isempty(data.experiment.id)
            set(gui.experiment.experimenter_edit, 'Enable', 'off');
            set(gui.experiment.description_edit, 'Enable', 'off');
            set(gui.experiment.key_popup, 'Enable', 'on');
            set(gui.experiment.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.experiment.key_popup, ...
                'String', keystr_zipper(data.experiment.experimenter, data.experiment.id));
            set(gui.project.key_popup, ...
                'Value', length(data.experiment.id));
            experiment_select_fcn(src, event);
        else
            set(gui.experiment.experimenter_edit, 'String', '');
            set(gui.experiment.description_edit, 'String', '');
        end
    end

% (3.3) Animal table callbacks

    function animal_update_fcn()
        [data.animal.id, data.animal.genotype, data.animal.birthdate, data.animal.sex, data.animal.name, data.animal.pyrat_id] = ...
            mysql(sprintf('select animal_id, genotype, birthdate, sex, name, pyrat_id from Animal where project_id = %d;', ...
            data.project.active));
        if data.project.active == 0 % no project selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No project selected'};
            name_str = '';
            genotype_str = '';
            sex_val = 1;
            birthdate_str = '';
            data.animal.active = 0;
        elseif numel(data.experiment.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            name_str = '';
            genotype_str = '';
            sex_val = 1;
            birthdate_str = '';
            data.animal.active = 0;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(data.animal.name, data.animal.id);
            name_str = data.animal.name(1);
            genotype_str = data.animal.genotype(1);
            if strcmpi(data.animal.sex(1), 'm')
                sex_val = 2;
            else
                sex_val = 3;
            end
            birthdate_str = data.animal.birthdate(1);
            data.experiment.active = data.animal.id(1);
        end
        
        set(gui.animal.key_popup, 'Enable', popup_state);
        set(gui.animal.key_popup, 'String', key_str);
        set(gui.animal.key_popup, 'Value', 1);
        set(gui.animal.name_edit, 'Enable', edit_state);
        set(gui.animal.name_edit, 'String', name_str);
        set(gui.animal.genotype_edit, 'Enable', edit_state);
        set(gui.animal.genotype_edit, 'String', genotype_str);
        set(gui.animal.sex_popup, 'Value', sex_val);
        set(gui.animal.sex_popup, 'Enable', edit_state);
        set(gui.animal.birthdate_edit, 'Enable', edit_state);
        set(gui.animal.birthdate_edit, 'String', birthdate_str);
        set(gui.animal.key_add_btn, 'Enable', add_state);
        set(gui.animal.key_rem_btn, 'Enable', popup_state);
        set(gui.animal.key_cancel_btn, 'Enable', edit_state);
    end

    function animal_select_fcn(src, event)
        if isempty(data.animal.id)
            data.animal.active = 0;
            set(gui.animal.name_edit, 'String', '');
            set(gui.animal.genotype_edit, 'String', '');
            set(gui.animal.sex_popup, 'Value', 1);
            set(gui.animal.birthdate_edit, 'String', '');
        else
            val = get(gui.animal.key_popup, 'Value');
            data.animal.active = data.animal.id(val);
            set(gui.animal.name_edit, 'String', data.animal.name(val));
            set(gui.animal.genotype_edit, 'String', data.animal.genotype(val));
            if strcmpi(data.animal.sex(val), 'm')
                sex_val = 2;
            else
                sex_val = 3;
            end
            set(gui.animal.sex_popup, 'Value', sex_val);
            set(gui.animal.birthdate_edit, 'String', data.animal.birthdate(val));
        end
        % TODO: update depending tables
        virusinjection_update_fcn();
        session_update_fcn();
    end

    function animal_add_fcn(src, event)
        sex_enum = {'', 'm', 'f'};
        if strcmp(get(gui.animal.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.animal.name_edit, 'String', '');
            set(gui.animal.genotype_edit, 'String', '');
            set(gui.animal.sex_popup, 'Value', 1);
            set(gui.animal.birthdate_edit, 'String', '');
            set(gui.animal.key_popup, 'String', {'Create new'});
            set(gui.animal.key_popup, 'Value', 1);
        elseif strcmp(get(gui.animal.name_edit, 'Enable'), 'on')
            name = get(gui.animal.name_edit, 'String');
            genotype = get(gui.animal.genotype_edit, 'String');
            sex = sex_enum{get(gui.animal.sex_popup, 'Value')};
            birthdate = get(gui.animal.birthdate_edit, 'String');
            data.animal.id = [data.animal.id; ...
                insert_animal(data.project.active, ...
                'Name', name, ...
                'Genotype', genotype, ...
                'Sex', sex, ...
                'Birthdate', birthdate)];
            if isempty(name); name = {''}; end
            data.animal.name = [data.animal.name; name];
            if isempty(genotype); genotype = {''}; end
            data.animal.genotype = [data.animal.genotype; genotype];
            if isempty(sex); sex = {''}; end
            data.animal.sex = [data.animal.sex; sex];
            if isempty(birthdate); birthdate = {''}; end
            data.animal.birthdate = [data.animal.birthdate; birthdate];
            set(gui.animal.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.animal.id)));
            set(gui.animal.key_popup, ...
                'String', keystr_zipper(data.animal.name, data.animal.id));
            set(gui.animal.key_popup, ...
                'Value', length(data.animal.id));
            animal_select_fcn(src, event); % trigger animal select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.animal.name_edit, 'Enable', edit_state);
        set(gui.animal.genotype_edit, 'Enable', edit_state);
        set(gui.animal.sex_popup, 'Enable', edit_state);
        set(gui.animal.birthdate_edit, 'Enable', edit_state);
        set(gui.animal.key_popup, 'Enable', popup_state);
        set(gui.animal.key_cancel_btn, 'Enable', edit_state);
        set(gui.animal.key_rem_btn, 'Enable', popup_state);
    end

    function animal_rem_fcn(src, event)
        val = get(gui.animal.key_popup, 'Value');
        id = data.animal.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from Animal where animal_id = %d;', id));
            % update ui / data container
            data.animal.id(val) = [];
            data.animal.name(val) = [];
            data.animal.genotype(val) = [];
            data.animal.sex(val) = [];
            data.animal.birthdate(val) = [];
            set(gui.animal.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.animal.id)));
            if isempty(data.animal.id) % force edit mode
                set(gui.animal.name_edit, 'Enable', 'on');
                set(gui.animal.genotype_edit, 'Enable', 'on');
                 set(gui.animal.sex_popup, 'Enable', 'on');
                set(gui.animal.birthdate_edit, 'Enable', 'on');
                set(gui.animal.key_popup, 'Enable', 'off');
                set(gui.animal.key_cancel_btn, 'Enable', 'on');
                set(gui.animal.key_rem_btn, 'Enable', 'off');
                set(gui.animal.key_popup, 'String', {'Create new'});
                set(gui.animal.key_popup, 'Value', 1);
            else
                set(gui.animal.key_popup, ...
                'String', keystr_zipper(data.animal.name, data.animal.id));
                set(gui.animal.key_popup, ...
                'Value', length(data.animal.id));
            end
            animal_select_fcn(src, event);
        end
    end

    function animal_cancel_fcn(src, event)
        if ~isempty(data.animal.id)
            set(gui.animal.name_edit, 'Enable', 'off');
            set(gui.animal.genotype_edit, 'Enable', 'off');
            set(gui.animal.sex_popup, 'Enable', 'off');
            set(gui.animal.birthdate_edit, 'Enable', 'off');
            set(gui.animal.key_popup, 'Enable', 'on');
            set(gui.animal.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.animal.key_popup, ...
                'String', keystr_zipper(data.animal.name, data.animal.id));
            set(gui.project.key_popup, ...
                'Value', length(data.animal.id));
            animal_select_fcn(src, event);
        else
            set(gui.animal.name_edit, 'String', '');
            set(gui.animal.genotype_edit, 'String', '');
            set(gui.animal.sex_popup, 'Value', 1);
            set(gui.animal.birthdate_edit, 'String', '');
        end
    end

% (3.4) StereotacticInjection table callbacks

    function virusinjection_update_fcn()
        [data.virusinjection.name, data.virusinjection.x_coord, data.virusinjection.y_coord, data.virusinjection.date, data.virusinjection.volume, data.virusinjection.target] = ...
            mysql(sprintf('select virus_name, x_coord, y_coord, date, volume, target from StereotacticInjection where animal_id = %d;', ...
            data.animal.active));
        if data.animal.active == 0 % no animal selected
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No animal selected'};
            name_str = '';
            x_str = '';
            y_str = '';
            date_str = '';
            volume_str = '';
            target_str = '';
        elseif numel(data.virusinjection.name) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            name_str = '';
            x_str = '';
            y_str = '';
            date_str = '';
            volume_str = '';
            target_str = '';
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(data.virusinjection.name, 1:length(data.virusinjection.name));
            name_str = data.virusinjection.name(1);
            x_str = num2str(data.virusinjection.x_coord(1));
            y_str = num2str(data.virusinjection.y_coord(1));
            date_str = data.virusinjection.date(1);
            volume_str = num2str(data.virusinjection.volume(1));
            target_str = data.virusinjection.target(1);
        end
        
        set(gui.virusinjection.key_popup, 'Enable', popup_state);
        set(gui.virusinjection.key_popup, 'String', key_str);
        set(gui.virusinjection.key_popup, 'Value', 1);
        set(gui.virusinjection.name_edit, 'Enable', edit_state);
        set(gui.virusinjection.name_edit, 'String', name_str);
        set(gui.virusinjection.x_edit, 'Enable', edit_state);
        set(gui.virusinjection.x_edit, 'String', x_str);
        set(gui.virusinjection.y_edit, 'Enable', edit_state);
        set(gui.virusinjection.y_edit, 'String', y_str);
        set(gui.virusinjection.date_edit, 'Enable', edit_state);
        set(gui.virusinjection.date_edit, 'String', date_str);
        set(gui.virusinjection.volume_edit, 'Enable', edit_state);
        set(gui.virusinjection.volume_edit, 'String', volume_str);
        set(gui.virusinjection.target_edit, 'Enable', edit_state);
        set(gui.virusinjection.target_edit, 'String', target_str);
        set(gui.virusinjection.key_add_btn, 'Enable', add_state);
        set(gui.virusinjection.key_rem_btn, 'Enable', popup_state);
        set(gui.virusinjection.key_cancel_btn, 'Enable', edit_state);
    end

    function virusinjection_select_fcn(src, event)
        if isempty(data.virusinjection.name)
            set(gui.virusinjection.name_edit, 'String', '');
            set(gui.virusinjection.x_edit, 'String', '');
            set(gui.virusinjection.y_edit, 'String', '');
            set(gui.virusinjection.date_edit, 'String', '');
            set(gui.virusinjection.volume_edit, 'String', '');
            set(gui.virusinjection.target_edit, 'String', '');
        else
            val = get(gui.virusinjection.key_popup, 'Value');
            set(gui.virusinjection.name_edit, 'String', data.virusinjection.name(val));
            set(gui.virusinjection.x_edit, 'String', num2str(data.virusinjection.x_coord(val)));
            set(gui.virusinjection.y_edit, 'String', num2str(data.virusinjection.y_coord(val)));
            set(gui.virusinjection.date_edit, 'String', data.virusinjection.date(val));
            set(gui.virusinjection.volume_edit, 'String', num2str(data.virusinjection.volume(val)));
            set(gui.virusinjection.target_edit, 'String', data.virusinjection.target(val));
        end
        % TODO: update depending tables
    end

    function virusinjection_add_fcn(src, event)
        if strcmp(get(gui.virusinjection.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.virusinjection.name_edit, 'String', '');
            set(gui.virusinjection.x_edit, 'String', '');
            set(gui.virusinjection.y_edit, 'String', '');
            set(gui.virusinjection.date_edit, 'String', '');
            set(gui.virusinjection.volume_edit, 'String', '');
            set(gui.virusinjection.target_edit, 'String', '');
            set(gui.virusinjection.key_popup, 'String', {'Create new'});
            set(gui.virusinjection.key_popup, 'Value', 1);
        elseif strcmp(get(gui.virusinjection.name_edit, 'Enable'), 'on')
            name = get(gui.virusinjection.name_edit, 'String');
            x = str2double(get(gui.virusinjection.x_edit, 'String'));
            y = str2double(get(gui.virusinjection.y_edit, 'String'));
            date = get(gui.virusinjection.date_edit, 'String');
            volume = str2double(get(gui.virusinjection.volume_edit, 'String'));
            target = get(gui.virusinjection.target_edit, 'String');
            insert_stereotactic(data.animal.active, ...
                'Virus', name, ...
                'Position', [x, y], ...
                'Date', date, ...
                'Volume', volume, ...
                'Target', target);
            if isempty(name); name = {''}; end
            data.virusinjection.name = [data.virusinjection.name; name];
            if isempty(x); x = 0; end
            data.virusinjection.x_coord = [data.virusinjection.x_coord; x];
            if isempty(y); y = 0; end
            data.virusinjection.y_coord = [data.virusinjection.y_coord; y];
            if isempty(date); date = {''}; end
            data.virusinjection.date = [data.virusinjection.date; date];
            if isempty(volume); volume = 0; end
            data.virusinjection.volume = [data.virusinjection.volume; volume];
            if isempty(target); target = {''}; end
            data.virusinjection.target = [data.virusinjection.target; target];
            set(gui.virusinjection.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.virusinjection.name)));
            set(gui.virusinjection.key_popup, ...
                'String', keystr_zipper(data.virusinjection.name, 1:length(data.virusinjection.name)));
            set(gui.virusinjection.key_popup, ...
                'Value', length(data.virusinjection.name));
            virusinjection_select_fcn(src, event); % trigger virusinjection select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.virusinjection.name_edit, 'Enable', edit_state);
        set(gui.virusinjection.x_edit, 'Enable', edit_state);
        set(gui.virusinjection.y_edit, 'Enable', edit_state);
        set(gui.virusinjection.date_edit, 'Enable', edit_state);
        set(gui.virusinjection.volume_edit, 'Enable', edit_state);
        set(gui.virusinjection.target_edit, 'Enable', edit_state);
        set(gui.virusinjection.key_popup, 'Enable', popup_state);
        set(gui.virusinjection.key_cancel_btn, 'Enable', edit_state);
        set(gui.virusinjection.key_rem_btn, 'Enable', popup_state);
    end

    function virusinjection_rem_fcn(src, event)
        val = get(gui.virusinjection.key_popup, 'Value');
        name = data.virusinjection.name{val};
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from StereotacticInjection where virus_name = ''%s'';', name));
            % update ui / data container
            data.virusinjection.name(val) = [];
            data.virusinjection.x_coord(val) = [];
            data.virusinjection.y_coord(val) = [];
            data.virusinjection.date(val) = [];
            data.virusinjection.volume(val) = [];
            data.virusinjection.target(val) = [];
            set(gui.virusinjection.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.virusinjection.name)));
            if isempty(data.virusinjection.name) % force edit mode
                set(gui.virusinjection.name_edit, 'Enable', 'on');
                set(gui.virusinjection.x_edit, 'Enable', 'on');
                 set(gui.virusinjection.y_edit, 'Enable', 'on');
                set(gui.virusinjection.date_edit, 'Enable', 'on');
                set(gui.virusinjection.volume_edit, 'Enable', 'on');
                set(gui.virusinjection.target_edit, 'Enable', 'on');
                set(gui.virusinjection.key_popup, 'Enable', 'off');
                set(gui.virusinjection.key_cancel_btn, 'Enable', 'on');
                set(gui.virusinjection.key_rem_btn, 'Enable', 'off');
                set(gui.virusinjection.key_popup, 'String', {'Create new'});
                set(gui.virusinjection.key_popup, 'Value', 1);
            else
                set(gui.virusinjection.key_popup, ...
                'String', keystr_zipper(data.virusinjection.name, 1:length(data.virusinjection.name)));
                set(gui.virusinjection.key_popup, ...
                'Value', length(data.virusinjection.name));
            end
            virusinjection_select_fcn(src, event);
        end
    end

    function virusinjection_cancel_fcn(src, event)
        if ~isempty(data.virusinjection.id)
            set(gui.virusinjection.name_edit, 'Enable', 'off');
            set(gui.virusinjection.x_edit, 'Enable', 'off');
            set(gui.virusinjection.y_edit, 'Enable', 'off');
            set(gui.virusinjection.date_edit, 'Enable', 'off');
            set(gui.virusinjection.volume_edit, 'Enable', 'off');
            set(gui.virusinjection.target_edit, 'Enable', 'off');
            set(gui.virusinjection.key_popup, 'Enable', 'on');
            set(gui.virusinjection.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.virusinjection.key_popup, ...
                'String', keystr_zipper(data.virusinjection.name, 1:length(data.virusinjection.name)));
            set(gui.project.key_popup, ...
                'Value', length(data.virusinjection.name));
            virusinjection_select_fcn(src, event);
        else
            set(gui.virusinjection.name_edit, 'String', '');
            set(gui.virusinjection.x_edit, 'String', '');
            set(gui.virusinjection.y_edit, 'String', '');
            set(gui.virusinjection.date_edit, 'String', '');
            set(gui.virusinjection.volume_edit, 'String', '');
            set(gui.virusinjection.target_edit, 'String', '');
        end
    end

% (3.5) Session table callbacks

    function session_update_fcn()
        [data.session.id, data.session.start_date, data.session.note, data.session.type] = ...
            mysql(sprintf('select session_id, start_date, note, session_type from Session where animal_id = %d and experiment_id = %d;', ...
            data.animal.active, data.experiment.active));
        if data.animal.active == 0 || data.experiment.active == 0
            popup_state = 'off';
            edit_state = 'off'; % show editbox, add and cancel btn
            add_state = 'off';
            key_str = {'No animal / experiment'};
            start_date_str = '';
            note_str = '';
            type_val = 1;
            data.session.active = 0;
        elseif numel(data.session.id) == 0 % empty table where project_id
            popup_state = 'off';
            edit_state = 'on'; % show editbox, add and cancel btn
            add_state = 'on';
            key_str = {'Create new'};
            start_date_str = '';
            note_str = '';
            type_val = 1;
            data.session.active = 0;
        else % populated table
            popup_state = 'on'; % show key select popup
            edit_state = 'off';
            add_state = 'on';
            key_str = keystr_zipper(data.session.start_date, data.session.id);
            start_date_str = data.session.start_date(1);
            note_str = num2str(data.session.note(1));
            if strcmpi(data.session.type(1), 'behav')
                type_val = 2;
            elseif strcmpi(data.session.type(1), 'rec')
                type_val = 3;
            elseif strcmpi(gui.session.type(1), 'both')
                type_val = 4;
            else
                type_val = 1;
            end
            data.session.active = data.session.id(1);
        end
        
        set(gui.session.key_popup, 'Enable', popup_state);
        set(gui.session.key_popup, 'String', key_str);
        set(gui.session.key_popup, 'Value', 1);
        set(gui.session.start_date_edit, 'Enable', edit_state);
        set(gui.session.start_date_edit, 'String', start_date_str);
        set(gui.session.note_edit, 'Enable', edit_state);
        set(gui.session.note_edit, 'String', note_str);
        set(gui.session.type_popup, 'Enable', edit_state);
        set(gui.session.type_popup, 'Value', type_val);
        set(gui.session.key_add_btn, 'Enable', add_state);
        set(gui.session.key_rem_btn, 'Enable', popup_state);
        set(gui.session.key_cancel_btn, 'Enable', edit_state);
    end

    function session_select_fcn(src, event)
        if isempty(data.session.id)
            set(gui.session.start_date_edit, 'String', '');
            set(gui.session.note_edit, 'String', '');
            set(gui.session.type_popup, 'Value', 1);
            data.session.active = 0;
        else
            val = get(gui.session.key_popup, 'Value');
            set(gui.session.start_date_edit, 'String', data.session.start_date(val));
            set(gui.session.note_edit, 'String', data.session.note(val));
            if strcmpi(data.session.type(val), 'behav')
                type_val = 2;
            elseif strcmpi(data.session.type(val), 'rec')
                type_val = 3;
            elseif strcmpi(data.session.type(val), 'both')
                type_val = 4;
            else
                type_val = 1;
            end
            set(gui.session.type_popup, 'Value', type_val);
            data.session.active = data.session.id(val);
        end
        % TODO: update depending tables
    end

    function session_add_fcn(src, event)
        if strcmp(get(gui.session.key_popup, 'Enable'), 'on')
            popup_state = 'off';
            edit_state = 'on';
            set(gui.session.start_date_edit, 'String', '');
            set(gui.session.note_edit, 'String', '');
            set(gui.session.type_popup, 'Value', 1);
            set(gui.session.key_popup, 'String', {'Create new'});
            set(gui.session.key_popup, 'Value', 1);
        elseif strcmp(get(gui.session.start_date_edit, 'Enable'), 'on')
            start_date = get(gui.session.start_date_edit, 'String');
            note = get(gui.session.note_edit, 'String');
            type_val = get(gui.session.type_popup, 'Value');
            if type_val == 0
                type = '';
            elseif type_val == 1
                type = 'behav';
            elseif type_val == 2
                type = 'rec';
            else
                type = 'both';
            end
            data.session.id = [data.session.id; ...
                insert_session(data.animal.active, data.experiment.active, ...
                start_date, 'Note', note, 'Type', type)];
            data.session.start_date = [data.session.start_date; start_date];
            if isempty(note); note = {''}; end
            data.session.note = [data.session.note; note];
            if isempty(type); type = {''}; end
            data.session.type = [data.session.type; type];
            set(gui.session.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.session.id)));
            set(gui.session.key_popup, ...
                'String', keystr_zipper(data.session.start_date, data.session.id));
            set(gui.session.key_popup, ...
                'Value', length(data.session.id));
            session_select_fcn(src, event); % trigger session select callback
            popup_state = 'on';
            edit_state = 'off';
        end
        set(gui.session.start_date_edit, 'Enable', edit_state);
        set(gui.session.note_edit, 'Enable', edit_state);
        set(gui.session.type_popup, 'Enable', edit_state);
        set(gui.session.key_popup, 'Enable', popup_state);
        set(gui.session.key_cancel_btn, 'Enable', edit_state);
        set(gui.session.key_rem_btn, 'Enable', popup_state);
    end

    function session_rem_fcn(src, event)
        val = get(gui.session.key_popup, 'Value');
        id = data.session.id(val);
        answ = questdlg('Are you sure?', 'Confirm removal', 'Yes', 'No', 'No');
        if strcmp(answ, 'Yes')
            % delete row
            mysql(sprintf('delete from Session where session_id = %d;', id));
            % update ui / data container
            data.session.id(val) = [];
            data.session.start_date(val) = [];
            data.session.note(val) = [];
            data.session.type(val) = [];
            set(gui.session.subtitle_text, ...
                'String', sprintf('( Rows: %d )', length(data.session.id)));
            if isempty(data.session.id) % force edit mode
                set(gui.session.start_date_edit, 'Enable', 'on');
                set(gui.session.note_edit, 'Enable', 'on');
                set(gui.session.type_popup, 'Enable', 'on');
                set(gui.session.key_popup, 'Enable', 'off');
                set(gui.session.key_cancel_btn, 'Enable', 'on');
                set(gui.session.key_rem_btn, 'Enable', 'off');
                set(gui.session.key_popup, 'String', {'Create new'});
                set(gui.session.key_popup, 'Value', 1);
            else
                set(gui.session.key_popup, ...
                'String', keystr_zipper(data.session.start_date, data.session.id));
                set(gui.session.key_popup, ...
                'Value', length(data.session.id));
            end
            session_select_fcn(src, event);
        end
    end

    function session_cancel_fcn(src, event)
        if ~isempty(data.session.id)
            set(gui.session.start_date_edit, 'Enable', 'off');
            set(gui.session.note_edit, 'Enable', 'off');
            set(gui.session.type_popup, 'Enable', 'off');
            set(gui.session.key_popup, 'Enable', 'on');
            set(gui.session.key_rem_btn, 'Enable', 'on');
            set(src, 'Enable', 'off');
            set(gui.session.key_popup, ...
                'String', keystr_zipper(data.session.start_date, data.session.id));
            set(gui.project.key_popup, ...
                'Value', length(data.session.id));
            session_select_fcn(src, event);
        else
            set(gui.session.start_date_edit, 'String', '');
            set(gui.session.note_edit, 'String', '');
            set(gui.session.type_popup, 'Value', 1);
        end
    end
%% (4) helper functions
    % zip cellstring and integer into new cellstring
    function keystr = keystr_zipper(cellstr, id)
        n = length(cellstr);
        keystr = cell(n, 1);
        if n == 0
            keystr = {''};
            return;
        end
        for i = 1:n
            keystr{i} = sprintf('%s (ID: %d)', cellstr{i}, id(i));
        end
    end

    % verify database integrity
    function bool = verify_db(db, args)
        % verify if tables are there
        t = mysql('show tables;');
        tables = fieldnames(db);
        alive = cellfun(@(x) any(strcmp(t, x)), tables);
        if all(alive)
            fprintf('- [x] All tables present.\n')
        elseif any(alive)
            fprintf('- [~] Detected missing tables:\n');
            fprintf('\t%s\n',tables{~alive});
            create = input('- [~] Create missing tables? [Y/n]: ', 's');
            if isempty(create) || ~any(strcmpi(create, {'n', 'no'}))
                cellfun(@(x) create_table(db.(x), 'Verbose', false), tables(~alive));
                alive = cellfun(@(x) any(strcmp(x, tables)), t);
                fprintf('- [x] All tables present.\n')
            else
                fprintf('- [~] Okay, continuing with missing tables.\n')
            end
        else
            fprintf('- [o] No tables detected.\n');
            create = input('- [o] Create all tables? [Y/n]: ', 's');
            if isempty(create) || ~any(strcmpi(create, {'n', 'no'}))
                create_table(db, 'Verbose', false);
                alive = cellfun(@(x) any(strcmp(x, tables)), t);
                fprintf('- [x] All tables present.\n')
            else
                fprintf('- [o] Okay, bye.\n')
                bool = false;
                return
            end
        end
        % verify that database is populated with a-priori knowledge
        cnt = cellfun(@(x) mysql(sprintf('select count(*) from %s', x)), tables(alive));
        if ~any(cnt)
            fprintf('- [o] Database is empty.\n');
            setup = input('- [o] Run setup script? [Y/n]: ', 's');
            if isempty(setup) || ~any(strcmpi(setup, {'n', 'no'}))
                db_setup(args.host, args.user, args.password, args.database, 'Verbose', false);
            else
                fprintf('- [o] Warning, some functions will not be useable.\n');
            end
        else
            fprintf('- [x] Database seems populated (%d rows).\n', sum(cnt));
        end
        fprintf('\n')
        bool = true;
    end

%     function col_cell = htmlCellColor(color, str)
%         if ~isempty(color)
%             col_cell = sprintf('<html><table border=0 bgcolor=%s><TR><TD>%s</TD></TR></table></html>', ...
%                 color, str);
%         end
%     end
end

